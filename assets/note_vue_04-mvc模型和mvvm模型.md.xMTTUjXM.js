import{_ as e,c as i,o as m,ag as o}from"./chunks/framework.CgAj5nG9.js";const p=JSON.parse('{"title":"4. mvc 模型及 mvvm 模型","description":"","frontmatter":{},"headers":[],"relativePath":"note/vue/04-mvc模型和mvvm模型.md","filePath":"note/vue/04-mvc模型和mvvm模型.md","lastUpdated":1751877942000}'),v={name:"note/vue/04-mvc模型和mvvm模型.md"};function t(a,l,c,_,r,n){return m(),i("div",null,l[0]||(l[0]=[o('<h1 id="_4-mvc-模型及-mvvm-模型" tabindex="-1">4. mvc 模型及 mvvm 模型 <a class="header-anchor" href="#_4-mvc-模型及-mvvm-模型" aria-label="Permalink to &quot;4. mvc 模型及 mvvm 模型&quot;">​</a></h1><ol><li>mvc 模型 <ol><li>起源于服务端</li><li>字母介绍 <ol><li>m: model(模型) 简单理解就是数据</li><li>v: view(视图) 就是页面</li><li>c: controller(控制器) 就是将数据展示到页面中 把数据获取到 对数据进行处理 将数据添加到页面中</li></ol></li></ol></li><li>mvvm 模型 <ol><li>字母介绍 <ol><li>m: model(模型) 简单理解就是数据 option</li><li>v: view(视图) 就是页面 #app</li><li>vm: viewModel (视图模型) 用来将数据进行处理 连接 model(模型) 和 view(视图)</li></ol></li></ol></li><li>在 vm 身上的所有东西都可以在 页面中展示出来</li><li>通过 vue 获取 vm 实例对象 <blockquote><p>var vm = Vue.createApp(option).mount(&#39;#app&#39;)</p></blockquote></li><li>我们在 data 中写的数据 最终都放在了 vm 的身上</li><li>vm 直接通过对象操作数据与 $data 操作一样</li></ol>',2)]))}const s=e(v,[["render",t]]);export{p as __pageData,s as default};
