import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.CgAj5nG9.js";const d=JSON.parse('{"title":"websocket","description":"","frontmatter":{},"headers":[],"relativePath":"note/nodejs/websocket.md","filePath":"note/nodejs/websocket.md","lastUpdated":1751877942000}'),l={name:"note/nodejs/websocket.md"};function h(p,s,k,e,F,B){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="websocket" tabindex="-1">websocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;websocket&quot;">​</a></h1><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1. 概述&quot;">​</a></h2><p>HTTP协议是一种无状态协议，服务器端本身不具有识别客户端的能力，必须借助外部机制，比如session和cookie，才能与特定客户端保持对话。这多多少少带来一些不便，尤其在服务器端与客户端需要持续交换数据的场合（比如网络聊天），更是如此。为了解决这个问题，HTML5提出了浏览器的WebSocket API。</p><p>WebSocket 是html5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。</p><p>WebSocket的主要作用是，允许服务器端与客户端进行全双工（full-duplex）的通信。举例来说，HTTP协议有点像发电子邮件，发出后必须等待对方回信；WebSocket则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p><p>WebSocket协议用ws表示。此外，还有wss协议，表示加密的WebSocket协议，对应HTTS协议。</p><h2 id="_2-连接过程" tabindex="-1">2. 连接过程 <a class="header-anchor" href="#_2-连接过程" aria-label="Permalink to &quot;2. 连接过程&quot;">​</a></h2><h3 id="_2-1-发送一个get请求" tabindex="-1">2-1. 发送一个GET请求 <a class="header-anchor" href="#_2-1-发送一个get请求" aria-label="Permalink to &quot;2-1. 发送一个GET请求&quot;">​</a></h3><p>请求头信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>GET / HTTP/1.1     // 请求方式及协议版本</span></span>
<span class="line"><span>Connection: Upgrade // 浏览器通知服务器，如果可以，就升级到webSocket协议 </span></span>
<span class="line"><span>Upgrade: websocket //Upgrade头信息表示将通信协议从HTTP/1.1转向该项所指定的协议</span></span>
<span class="line"><span>Host: localhost:5000</span></span>
<span class="line"><span>Origin: null // 源地址信息</span></span>
<span class="line"><span>Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ== //用于握手协议的密钥，是base64编码的16字节随机字符串。</span></span>
<span class="line"><span>Sec-WebSocket-Version: 13 //  WebSocket 版本号</span></span></code></pre></div><h3 id="_2-2-服务期给出响应" tabindex="-1">2-2. 服务期给出响应 <a class="header-anchor" href="#_2-2-服务期给出响应" aria-label="Permalink to &quot;2-2. 服务期给出响应&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 101 Switching Protocols // 请求方式及协议版本</span></span>
<span class="line"><span>Connection: Upgrade  // 通知浏览器，需要改变协议</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s= // 是服务器在浏览器提供的Sec-WebSocket-Key字符串后面，添加“258EAFA5-E914-47DA-95CA-C5AB0DC85B11” 字符串，然后再取sha-1的hash值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了webSocket请求</span></span>
<span class="line"><span>Sec-WebSocket-Location: ws://example.com/</span></span></code></pre></div><h4 id="_2-3-握手完成-websocket-建立再tcp-协议之上-开始数据传输" tabindex="-1">2-3. 握手完成 WebSocket 建立再tcp 协议之上 开始数据传输 <a class="header-anchor" href="#_2-3-握手完成-websocket-建立再tcp-协议之上-开始数据传输" aria-label="Permalink to &quot;2-3. 握手完成 WebSocket 建立再tcp 协议之上 开始数据传输&quot;">​</a></h4><h3 id="_3-nodejs-搭建websocket-服务器" tabindex="-1">3. nodejs 搭建websocket 服务器 <a class="header-anchor" href="#_3-nodejs-搭建websocket-服务器" aria-label="Permalink to &quot;3. nodejs 搭建websocket 服务器&quot;">​</a></h3><p>使用ws模块包搭建websocket 服务</p><p>ws 是一个第三方库，帮助我们操作 webSocket 的一个库</p><h3 id="_3-1-项目初始化" tabindex="-1">3-1. 项目初始化 <a class="header-anchor" href="#_3-1-项目初始化" aria-label="Permalink to &quot;3-1. 项目初始化&quot;">​</a></h3><p>新建wechat文件夹 执行 <code>npm init -y</code> 初始化项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>npm init -y</span></span></code></pre></div><h3 id="_3-2-安装项目依赖包" tabindex="-1">3-2. 安装项目依赖包 <a class="header-anchor" href="#_3-2-安装项目依赖包" aria-label="Permalink to &quot;3-2. 安装项目依赖包&quot;">​</a></h3><p><strong>lib</strong><em>express</em><em>ws</em></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>npm install express ws</span></span></code></pre></div><h3 id="_3-3-在根目录下-建立入口文件-index-js" tabindex="-1">3-3. 在根目录下 建立入口文件 index.js <a class="header-anchor" href="#_3-3-在根目录下-建立入口文件-index-js" aria-label="Permalink to &quot;3-3. 在根目录下 建立入口文件 index.js&quot;">​</a></h3><p>index.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;express&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 基于 express 创建 一个服务器对象</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> express();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 注册静态目录，在浏览器中向 &quot;localhost:3000&quot; 发送请求的时候，服务端直接将静态目录中的 index.html 内容返回。</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">app</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.use(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">express</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.static(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;www&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 创建 http 服务</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;http&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.createServer(app);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.listen(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">3000</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">  console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;服务已启动&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// http 服务是用于客户端和服务端建立连接，而 某一个客户端 想要完成 和 websocket 之间的连接，首次连接是需要依赖于 http 服务的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 创建一个 websocket 服务，这个 websocket 服务是用于后期聊天功能，而 http 服务 可以继续处理 接口请求。</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> WebSocket</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;ws&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> wss</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> WebSocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.Server({ server });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 1. 使用 wss(webSocketServer) 监听 连接 事件，当有新的用户和websocket进行连接的时候，就会触发这个事件。</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">wss</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.on(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;connection&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (ws) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">  console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;有新用户建立连接了&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">  ws</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.send(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;欢迎进入xxx，请问需要什么帮助吗？&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">  // 这里的 ws 参数，代表每一个用户所产生的连接对象，只要有新的用户产生，就会有新的 ws 连接对象。</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">  ws</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.on(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;close&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;有用户断开连接了&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">  // 监听服务端的 websocket 接受数据的函数，只要客户端发送消息，就执行这个事件</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">  ws</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.on(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;message&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    ws</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.send(data);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  });</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span></code></pre></div><h3 id="_3-4-启动服务" tabindex="-1">3-4. 启动服务 <a class="header-anchor" href="#_3-4-启动服务" aria-label="Permalink to &quot;3-4. 启动服务&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>node index.js</span></span></code></pre></div><h3 id="_3-5-api-参考" tabindex="-1">3-5. api 参考 <a class="header-anchor" href="#_3-5-api-参考" aria-label="Permalink to &quot;3-5. api 参考&quot;">​</a></h3><h4 id="_3-5-1-ws-事件" tabindex="-1">3-5-1. ws 事件 <a class="header-anchor" href="#_3-5-1-ws-事件" aria-label="Permalink to &quot;3-5-1. ws 事件&quot;">​</a></h4><ul><li>message 当接受到客户端的消息时触发</li><li>close 当客户段和服务端断开连接时处罚</li><li>pong 当侦听到服务端发送的 ping 心跳事件时触发</li><li>error 连接发生错误时执行</li></ul><h4 id="_3-5-2-ws-api" tabindex="-1">3-5-2. ws Api <a class="header-anchor" href="#_3-5-2-ws-api" aria-label="Permalink to &quot;3-5-2. ws Api&quot;">​</a></h4><ul><li>send() 向客户段发送数据(二进制数据流|字符串)</li><li>ping() 心跳机制方法 用于检测服务段和客户端是否断开连接 此方法调用时 会执行pong事件</li><li>close() 关闭客户端和服务端之间的连接</li></ul><h4 id="_3-5-3-wss-事件" tabindex="-1">3-5-3. wss 事件 <a class="header-anchor" href="#_3-5-3-wss-事件" aria-label="Permalink to &quot;3-5-3. wss 事件&quot;">​</a></h4><ul><li>connection 当有新用户连接时触发</li></ul><h4 id="_3-5-4-wss-属性" tabindex="-1">3-5-4. wss 属性 <a class="header-anchor" href="#_3-5-4-wss-属性" aria-label="Permalink to &quot;3-5-4. wss 属性&quot;">​</a></h4><ul><li>clients 所有连接用户的集合</li></ul><h2 id="_4-客户端" tabindex="-1">4. 客户端 <a class="header-anchor" href="#_4-客户端" aria-label="Permalink to &quot;4. 客户端&quot;">​</a></h2><p>index.html</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;!</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">DOCTYPE</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> html&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;en&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;UTF-8&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;viewport&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;Document&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;text&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;输入内容&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;connectBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;和后端的websocket建立连接&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;sendBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;向后端的websocket发送消息&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;deconnectBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;断开和后端websocket的连接&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">div</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;content&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">div</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> connectBtn </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;.connectBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> sendBtn </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;.sendBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> deconnectBtn </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;.deconnectBtn&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> input </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;input&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> div </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;.content&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> websocket </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">      connectBtn</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onclick </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 点击按钮，和 websocket 服务建立连接</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // WebSocket() 这个类就是 h5 给我们提供的 用于操作 websocket 的 API.</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 参数：表示和哪一个 websocket 服务进行连接。要和 localhost:3000 这个 服务连接，ws:是固定的。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        websocket </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> WebSocket(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;ws:localhost:3000&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 客户端的 websocket 监听消息事件，当有服务端的消息时，自动触发这个事件。</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onmessage </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">          div</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.innerHTML </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> \`&lt;span&gt;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">e</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&lt;/span&gt;&lt;br/&gt;\`</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 客户端监听 websocket 的断开事件</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onclose </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">          input</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.value </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">          div</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.innerText </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        };</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">      deconnectBtn</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onclick </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">websocket) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">          alert(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;先建立连接&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 点击按钮，断开和 websocket 服务的连接</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.close();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">      sendBtn</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onclick </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">websocket) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">          alert(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;先建立连接&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 发送字符串</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.send(</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">          JSON</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.stringify({ name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;张三&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> input</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.value })</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        );</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      };</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><h3 id="_4-1-连接步骤" tabindex="-1">4-1. 连接步骤 <a class="header-anchor" href="#_4-1-连接步骤" aria-label="Permalink to &quot;4-1. 连接步骤&quot;">​</a></h3><h4 id="_4-1-1-创建ws-对象" tabindex="-1">4-1-1.创建ws 对象 <a class="header-anchor" href="#_4-1-1-创建ws-对象" aria-label="Permalink to &quot;4-1-1.创建ws 对象&quot;">​</a></h4><p>WebSocket</p><ul><li>参数一：要连接的 URL；这应该是 WebSocket 服务器将响应的 URL。</li><li>参数二：一个协议字符串或者一个包含协议字符串的数组。这些字符串用于指定子协议，这样单个服务器可以实现多个 WebSocket 子协议（例如，您可能希望一台服务器能够根据指定的协议（protocol）处理不同类型的交互）。如果不指定协议字符串，则假定为空字符串。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">websocket </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> WebSocket(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;ws:localhost:3000&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span></code></pre></div><p>建立连接以后的WebSocket实例对象（即上面代码中的websocket），有一个readyState属性，表示目前的状态，可以取4个值：</p><p>0： 正在连接 1： 连接成功 2： 正在关闭 3： 连接关闭</p><p>握手协议成功以后，readyState就从0变为1，并触发open事件，这时就可以向服务器发送信息了。我们可以指定open事件的回调函数。</p><h4 id="_4-1-2-发送数据" tabindex="-1">4-1-2. 发送数据 <a class="header-anchor" href="#_4-1-2-发送数据" aria-label="Permalink to &quot;4-1-2. 发送数据&quot;">​</a></h4><p>onopen 当连接完成时触发</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onopen </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ()</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.send() </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 用于向服务端发送数据（二进制数据流｜字符串）</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><h4 id="_4-1-3-接受数据" tabindex="-1">4-1-3. 接受数据 <a class="header-anchor" href="#_4-1-3-接受数据" aria-label="Permalink to &quot;4-1-3. 接受数据&quot;">​</a></h4><p>onmessage 当接收到服务端的数据时触发</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">websocket</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.onmessage </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (e)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    consloe</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">e</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.data) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 接受到的数据</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><h4 id="_4-1-4-关闭事件" tabindex="-1">4-1-4. 关闭事件 <a class="header-anchor" href="#_4-1-4-关闭事件" aria-label="Permalink to &quot;4-1-4. 关闭事件&quot;">​</a></h4><p>onclose</p><h4 id="_4-1-4-连接错误事件" tabindex="-1">4-1-4. 连接错误事件 <a class="header-anchor" href="#_4-1-4-连接错误事件" aria-label="Permalink to &quot;4-1-4. 连接错误事件&quot;">​</a></h4><p>onerror</p><h4 id="_4-1-5-api-方法" tabindex="-1">4-1-5. api 方法 <a class="header-anchor" href="#_4-1-5-api-方法" aria-label="Permalink to &quot;4-1-5. api 方法&quot;">​</a></h4><ul><li>send() 发送数据</li><li>close() 关闭连接</li></ul><h2 id="_5-心跳机制" tabindex="-1">5. 心跳机制 <a class="header-anchor" href="#_5-心跳机制" aria-label="Permalink to &quot;5. 心跳机制&quot;">​</a></h2><p>WebSocket为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的TCP通道保持连接没有断开。然而，对于长时间没有数据往来的连接，如果依旧长时间保持着，可能会浪费包括的连接资源。</p><p>但不排除有些场景，客户端、服务端虽然长时间没有数据往来，但仍需要保持连接。这个时候，可以采用心跳来实现。</p><ul><li>发送方-&gt;接收方：ping</li><li>接收方-&gt;发送方：pong</li></ul><p>ws 代码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>ws.ping(&#39;ping&#39;);</span></span>
<span class="line"><span>ws.on(&#39;pong&#39;,(e)=&gt;{</span></span>
<span class="line"><span>    console.log(e)</span></span>
<span class="line"><span>})</span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">参考文档</a></p>`,66)]))}const o=i(l,[["render",h]]);export{d as __pageData,o as default};
