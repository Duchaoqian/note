import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CgAj5nG9.js";const d=JSON.parse('{"title":"类和对象","description":"","frontmatter":{},"headers":[],"relativePath":"note/JavaScript/类和对象.md","filePath":"note/JavaScript/类和对象.md","lastUpdated":1751877942000}'),h={name:"note/JavaScript/类和对象.md"};function p(k,s,t,e,F,B){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="类和对象" tabindex="-1">类和对象 <a class="header-anchor" href="#类和对象" aria-label="Permalink to &quot;类和对象&quot;">​</a></h1><h2 id="面向过程" tabindex="-1">面向过程 <a class="header-anchor" href="#面向过程" aria-label="Permalink to &quot;面向过程&quot;">​</a></h2><p>面向过程就是解决问题，实现某种功能的时候按照我们自己罗列的步骤去解决问题</p><p>总结下来就八个字 自顶向下，逐步细化</p><h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h2><p>面向对象更贴近我们的实际生活，可以使用面向对象描述现实世界事物，但是事物分为具体的事物和抽象的事物</p><p>手机 抽象的（泛指的）</p><p>iphone 具体的手机</p><p><strong>面向对象的思维特点：</strong></p><pre><code>1. 抽取（抽象）对象公用的属性和行为组织（封装）成一个类（模版）
2. 对类进行实例化，获取类的对象
</code></pre><p><em>面向对象编程我们考虑的是有那些对象，按照面向对象的思维特点，不断的创建对象，指挥对象做事情。</em></p><h2 id="_1-对象" tabindex="-1">1. 对象 <a class="header-anchor" href="#_1-对象" aria-label="Permalink to &quot;1. 对象&quot;">​</a></h2><p>现实生活中：万物皆对象，对象是一个具体的事物，看得见摸得着的实物，例如，一本书，一辆汽车，一个人都可以是“对象”，一个数据库，一张网页，一个与远程服务器的连接也可以是“对象”。</p><p>在 js中，对象是一组无序的相关属性和方法的集合，例如字符串，数字，数组，函数等</p><p>对象是由属性和方法组成的：</p><ul><li>属性：事物的特征，在对象中用属性来表示</li><li>方法：实物的行为，在对象中用方法来表示</li></ul><h2 id="_2-类-class" tabindex="-1">2. 类 class <a class="header-anchor" href="#_2-类-class" aria-label="Permalink to &quot;2. 类 class&quot;">​</a></h2><p>在 es6 中新增加了类的概念，可以使用class关键字声明一个类，之后以这个类来实例化对象</p><pre><code>类抽象了对象的公共部分，它泛指某一大类（class）
对象特指某一个，通过类实例化一个具体的对象
</code></pre><h2 id="_3-创建类" tabindex="-1">3. 创建类 <a class="header-anchor" href="#_3-创建类" aria-label="Permalink to &quot;3. 创建类&quot;">​</a></h2><p>语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // class body</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>创建实例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> xx </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name()</span></span></code></pre></div><p>==注意：类必须使用new 实例化对象==</p><h2 id="_4-类constructor-构造函数" tabindex="-1">4. 类constructor 构造函数 <a class="header-anchor" href="#_4-类constructor-构造函数" aria-label="Permalink to &quot;4. 类constructor 构造函数&quot;">​</a></h2><p>constructor() 方法是类的构造函数（默认方法），用于传递参数，返回实例对象，通过new命令生成对象实例时，自动调用该函数，如果没有定义，类内部会自动给我们创建一个constructor（）</p><p>在类中所有的函数都不需要 function</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People{</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(username</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    &lt;!--</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> 可以接收我们传递过来的参数</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.username </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> username</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    eat(food){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;吃的&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> food)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> zs </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Star(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;张三&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">zs</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.username)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">zs</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.eat(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;回锅肉&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span></code></pre></div><ul><li>通过class 关键字创建类，类名我们还是习惯性定义首字母大写，</li><li>类中有constructor 函数，可以接收传递过来的参数，同时返回实例对象</li><li>constructor 函数 只要new生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数</li><li>生成实例 new 不能省略</li><li>注意语法规范，创建类，类名后面不要加小括号，生成实例，类名后面加小括号，构造函数不需要加function，类中的函数都不需要加function</li><li>多个函数之间不需要添加逗号分隔</li></ul><h2 id="_5-1-类的继承" tabindex="-1">5.1 类的继承 <a class="header-anchor" href="#_5-1-类的继承" aria-label="Permalink to &quot;5.1 类的继承&quot;">​</a></h2><p>现实中的继承，子承父业，比如我们都继承了父亲的姓</p><p>在程序中的继承，子类可以继承父类的一些属性和方法。</p><p>语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>实例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    money(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">100</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.money()</span></span></code></pre></div><p>实例1：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">y){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> x</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    sum(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 只有父类中的x和y才能想加</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> x</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sum()</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> 报错</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">--&gt;</span></span></code></pre></div><h2 id="_5-2-super-关键字" tabindex="-1">5.2 super 关键字 <a class="header-anchor" href="#_5-2-super-关键字" aria-label="Permalink to &quot;5.2 super 关键字&quot;">​</a></h2><p>super 关键字用于访问和调用父类上的函数，可以调用父类的构造函数，也可以调用父类的普通函数</p><p>实例1调用父类的构造函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">y){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> x</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    sum(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // 只有父类中的x和y才能想加</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y){</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">       super(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">y); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 调用了父类中的构造函数</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sum()</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> 报错</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">--&gt;</span></span></code></pre></div><p>实例2调用父类的普通函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    say(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我是爸爸&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;我是爸爸&quot;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    say(){</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // console.log(&quot;我是儿子&quot;)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(super.say() </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;的儿子&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // super.say() 就是调用父类中的普通函数 say</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.say();</span></span></code></pre></div><p><strong>继承中的属性或者方法查找原则：就近原则</strong></p><ul><li>继承中，如果实例化子类输出一个方法，先看子类有没有这个方法，如果有就先执行子类的</li><li>继承中，如果子类里面没有，就去查找父类有没有这个方法，如果有，就执行父类的这个方法（就近原则）</li></ul><p>案例3 继承父类方法 扩展自己的方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">y){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> x</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    sum(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y){</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        super(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">y) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 子类在构造函数中使用super，必须放到this前面，（必须先调用父类的构造函数方法，再使用子类构造函数方法）</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> x</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //  super(x, y)</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 调用父类的构造函数</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    substract(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.x </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.y)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> son </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son(x</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> y)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substract()</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sum()</span></span></code></pre></div><p>==子类在构造函数中使用super，必须放到this前面，（必须先调用父类的构造函数方法，再使用子类构造函数方法==</p><p><strong>总结注意点：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;点击&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">button</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">var self;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    class People{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        constructor(name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            this.name </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            this.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            this.say();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            this.btn </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;button&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            this.btn.onclick </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // this 指的是创建的实例对象</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            self </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        say(){</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">        // this 指向btn</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            console.log(this)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            console.log(self.name) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// self 里面存储的是constructor里面的this</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        run(){</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            console.log(this)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    var zs = new People(&quot;张三&quot;, 20)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    console.log(self = zs)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    console.log(zs.run)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    console.log(zs.say)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><ul><li>在 ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li><li>类里面的共有的属性和方法一定要加 this 使用</li><li>类中this指向问题</li></ul>`,53)]))}const g=i(h,[["render",p]]);export{d as __pageData,g as default};
