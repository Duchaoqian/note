import{_ as a,c as i,o as s,ag as t}from"./chunks/framework.CgAj5nG9.js";const u=JSON.parse('{"title":"React 技术栈 网易云音乐 PC 项目实战","description":"","frontmatter":{},"headers":[],"relativePath":"project/pc/网易云音乐/index.md","filePath":"project/pc/网易云音乐/index.md","lastUpdated":1751877942000}'),o={name:"project/pc/网易云音乐/index.md"};function c(l,e,d,n,r,p){return s(),i("div",null,e[0]||(e[0]=[t(`<meta name="referrer" content="no-referrer"><p><a href="https://gitee.com/arcsiny/cloud-music" target="_blank" rel="noreferrer">gitee访问</a></p><h1 id="react-技术栈-网易云音乐-pc-项目实战" tabindex="-1">React 技术栈 网易云音乐 PC 项目实战 <a class="header-anchor" href="#react-技术栈-网易云音乐-pc-项目实战" aria-label="Permalink to &quot;React 技术栈 网易云音乐 PC 项目实战&quot;">​</a></h1><h2 id="项目简介" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介" aria-label="Permalink to &quot;项目简介&quot;">​</a></h2><h3 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3><p>基于 <code>react</code> + <code>redux</code> + <code>react-router</code> + <code>styled-components</code> + <code>axios</code> + <code>ant design</code> + <code>react-redux</code> + <code>redux-thunk</code> <code>immutable</code> + <code>redux-immutable</code> + <code>react-transition-group</code> 等开发一款 PC 端「网易云音乐 PC」 Web 项目，UI 界面参考了 PC 版的网易云音乐、flex 布局。</p><h2 id="界面和功能展示" tabindex="-1">界面和功能展示 <a class="header-anchor" href="#界面和功能展示" aria-label="Permalink to &quot;界面和功能展示&quot;">​</a></h2><p><img src="https://s1.ax1x.com/2022/04/30/OSke0S.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkLNQ.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkOhj.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkqAg.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkj9s.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkHHS.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkzj0.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSA9BT.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSkv3n.png" alt="输入图片说明"><img src="https://s1.ax1x.com/2022/04/30/OSApuV.png" alt="输入图片说明"></p><h2 id="技术栈-1" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈-1" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><h3 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h3><ul><li><code>React</code>：用于构建用户界面的 <code>MVVM</code> 框架</li><li><code>styled-components</code>：解决组件内容编写样式会影响全局样式导致冲突</li><li><code>axios</code>: 发送网络请求，请求拦截和响应拦截</li><li><code>react-router</code>：为单页面应用提供的路由系统</li><li><code>react-router-config</code>：集中式路径映射表管理</li><li><code>redux</code>：React 集中状态管理，在多个组件共享某些状态时非常方便</li><li><code>react-redux</code>：帮助我们链及<code>redux</code>、<code>react</code>的辅助工具</li><li><code>immutable</code>：对<code>reudx</code>中保存的<code>state</code>使用<code>immutable</code>进行管理</li><li><code>redux-immutable</code>: 对根目录的<code>reducer</code>中<code>state</code>进行管理</li><li><code>redux-thunk</code>: 在<code>redux</code>中进行异步请求</li></ul><h3 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h3><ul><li><code>Node.js</code>：利用 <code>Express</code> 搭建的本地测试服务器</li><li><code>axios</code>：用来请求后端 <code>API</code> 音乐数据</li><li><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/" target="_blank" rel="noreferrer">NeteaseCloudMusicApi</a>：网易云音乐 <code>NodeJS</code> 版 <code>API</code>，提供音乐数据</li></ul><h2 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h2><ul><li>克隆代码到本地之后，需要再克隆网易云音乐 <code>NodeJS</code> 版 <code>API</code>，</li><li>服务器启动默认端口为 3000, 若不想使用 3000 端口 , 可使用以下命令 : Mac/Linux</li><li>$ PORT=3001 node app.js</li><li>windows 下使用 git-bash 或者 cmder 等终端执行以下命令 :</li><li>$ set PORT=3001 &amp;&amp; node app.js</li><li>如果需要在服务器上搭建的话就需要将 API 放到自己的服务器上面。(<strong>可选)</strong></li></ul><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"># yarn dependencies</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">yarn install </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> npm install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"># serve with hot reload at localhost:3000</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">yarn start  </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> npm start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"># build for production with minification</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">yarn build  </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  npm build</span></span></code></pre></div>`,16)]))}const m=a(o,[["render",c]]);export{u as __pageData,m as default};
