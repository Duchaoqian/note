import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CgAj5nG9.js";const d=JSON.parse('{"title":"数组常用方法","description":"","frontmatter":{},"headers":[],"relativePath":"note/JavaScript/数组常用方法.md","filePath":"note/JavaScript/数组常用方法.md","lastUpdated":1751877942000}'),l={name:"note/JavaScript/数组常用方法.md"};function k(B,s,t,p,e,F){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="数组常用方法" tabindex="-1">数组常用方法 <a class="header-anchor" href="#数组常用方法" aria-label="Permalink to &quot;数组常用方法&quot;">​</a></h1><h2 id="_1-栈方法-后进先出" tabindex="-1">1. 栈方法（后进先出） <a class="header-anchor" href="#_1-栈方法-后进先出" aria-label="Permalink to &quot;1. 栈方法（后进先出）&quot;">​</a></h2><h3 id="push-方法-向数组末尾追加一个或更多元素-返回的是数组新的长度" tabindex="-1">push() 方法：向数组末尾追加一个或更多元素，返回的是数组新的长度 <a class="header-anchor" href="#push-方法-向数组末尾追加一个或更多元素-返回的是数组新的长度" aria-label="Permalink to &quot;push() 方法：向数组末尾追加一个或更多元素，返回的是数组新的长度&quot;">​</a></h3><p>传递参数数量不定，可以传递 0 到多个，参数之间使用 , 隔开</p><ul><li>改变了原有数组，不会返回新数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> length </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.push(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Kiwi&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(length);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 5</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;, &#39;Kiwi&#39;]</span></span></code></pre></div><h3 id="pop-方法-向数组中删除最后一个元素并且返回该元素" tabindex="-1">pop() 方法：向数组中删除最后一个元素并且返回该元素 <a class="header-anchor" href="#pop-方法-向数组中删除最后一个元素并且返回该元素" aria-label="Permalink to &quot;pop() 方法：向数组中删除最后一个元素并且返回该元素&quot;">​</a></h3><p>不需要传递参数</p><ul><li>改变了原有数组，不会返回新数组</li><li>如果数组为空就返回 undefined</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.pop();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(item);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;Mango&#39;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//  [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.pop();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(item);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//  []</span></span></code></pre></div><h2 id="_2-队列方法" tabindex="-1">2. 队列方法 <a class="header-anchor" href="#_2-队列方法" aria-label="Permalink to &quot;2. 队列方法&quot;">​</a></h2><h3 id="shift-方法-把数组的第一个元素删除-并作为返回值返回" tabindex="-1">shift() 方法：把数组的第一个元素删除，并作为返回值返回 <a class="header-anchor" href="#shift-方法-把数组的第一个元素删除-并作为返回值返回" aria-label="Permalink to &quot;shift() 方法：把数组的第一个元素删除，并作为返回值返回&quot;">​</a></h3><p>不需要传递参数</p><ul><li>改变了原有数组，不会返回新数组</li><li>如果数组为空就返回 undefined</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.shift();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(item);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;Banana&#39;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.shift();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(item);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// []</span></span></code></pre></div><h3 id="unshift-方法-向数组的开头添加一个或更多元素-返回的是数组新的长度" tabindex="-1">unshift()方法：向数组的开头添加一个或更多元素，返回的是数组新的长度 <a class="header-anchor" href="#unshift-方法-向数组的开头添加一个或更多元素-返回的是数组新的长度" aria-label="Permalink to &quot;unshift()方法：向数组的开头添加一个或更多元素，返回的是数组新的长度&quot;">​</a></h3><p>传递参数数量不定，可以传递 0 到多个，参数之间使用 , 隔开</p><ul><li>改变了原有数组，不会返回新数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> length </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.unshift(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Lemon&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Pineapple&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(length);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 6</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Lemon&#39;, &#39;Pineapple&#39;, &#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span></code></pre></div><h2 id="_3-转换方法" tabindex="-1">3. 转换方法 <a class="header-anchor" href="#_3-转换方法" aria-label="Permalink to &quot;3. 转换方法&quot;">​</a></h2><h3 id="join-方法-用于把数组中的所有元素转换一个字符串并进行连接" tabindex="-1">join() 方法：用于把数组中的所有元素转换一个字符串并进行连接 <a class="header-anchor" href="#join-方法-用于把数组中的所有元素转换一个字符串并进行连接" aria-label="Permalink to &quot;join() 方法：用于把数组中的所有元素转换一个字符串并进行连接&quot;">​</a></h3><ul><li>在转换时，内部的空值和未定义值会去除，但是 分隔符 , 会被保留</li><li>对于非字符串数据会被强制转为字符串</li><li>返回一个新的字符串，不会改变原数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> energy </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.join();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(energy); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;Banana,Orange,Apple,Mango&#39;</span></span></code></pre></div><p>特殊元素转化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 123</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> NaN</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;szx&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 28</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> []];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> energy </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.join();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(energy);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;Banana,,123,NaN,,,() =&gt; { },[object Object],&#39;</span></span></code></pre></div><h2 id="_4-重排序方法" tabindex="-1">4. 重排序方法 <a class="header-anchor" href="#_4-重排序方法" aria-label="Permalink to &quot;4. 重排序方法&quot;">​</a></h2><h3 id="sort-方法-用于对数组的元素进行排序" tabindex="-1">sort() 方法：用于对数组的元素进行排序 <a class="header-anchor" href="#sort-方法-用于对数组的元素进行排序" aria-label="Permalink to &quot;sort() 方法：用于对数组的元素进行排序&quot;">​</a></h3><p>sort(sortFn)：可传递一个参数</p><ul><li>默认排序顺序为按字母升序。为了实现排序，sort() 方法会对每个数组项调用 toString() 转型方法，然后比较得到字符串，以确定如何排序。（实质按照首字母 ASCII 码顺序进行排列，首字母相同比较第二个，依次类推）</li><li>参数可选，非必需。</li><li>若传递参数，参数必须是一个函数，且函数须有两个参数。sort() 方法会自动把数组中元素两两传入函数中，根据函数返回值进行排序。如果想让第一个参数应该位于第二个之前则返回一个负数；如果想让第一个参数位于第二个之后则返回一个正数；如果两个参数想保持原有顺序，返回 0。（可以自定义排序方法，本质上最终目的还是两个具体的值之间进行比大小）</li><li>改变了原有数组，不会返回新数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sort();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Apple&#39;, &#39;Banana&#39;, &#39;Mango&#39;, &#39;Orange&#39;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> price</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 13</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> price</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 8</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> price</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> price</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 4</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sort((val1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> val2) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">val1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.price </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> val2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.price) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">val1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.price </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> val2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.price) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [{ name: &#39;Mango&#39;, price: 4 }, { name: &#39;Orange&#39;, price: 8 }, { name: &#39;Banana&#39;, price: 13 }, { name: &#39;Apple&#39;, price: 20 }]</span></span></code></pre></div><h3 id="reverse-方法-用于颠倒数组中元素的顺序" tabindex="-1">reverse()方法：用于颠倒数组中元素的顺序 <a class="header-anchor" href="#reverse-方法-用于颠倒数组中元素的顺序" aria-label="Permalink to &quot;reverse()方法：用于颠倒数组中元素的顺序&quot;">​</a></h3><p>无参数</p><ul><li>只是将数组中的现有排列顺序进行反向，和元素的值无关</li><li>改变了原有数组，不会返回新数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.reverse();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Mango&#39;, &#39;Apple&#39;, &#39;Orange&#39;, &#39;Banana&#39;]</span></span></code></pre></div><h2 id="_5-操作方法" tabindex="-1">5. 操作方法 <a class="header-anchor" href="#_5-操作方法" aria-label="Permalink to &quot;5. 操作方法&quot;">​</a></h2><h3 id="concat-方法-连接两个或多个数组" tabindex="-1">concat() 方法：连接两个或多个数组 <a class="header-anchor" href="#concat-方法-连接两个或多个数组" aria-label="Permalink to &quot;concat() 方法：连接两个或多个数组&quot;">​</a></h3><p>可传递多个参数</p><ul><li>参数数据类型不作限制。若类型不是数组，则连接后作为一个数组的元素。</li><li>不会改变现有的数组，而返回连接后的新数组。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> hege </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Cecilie&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Lone&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> stale </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Emil&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Tobias&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Linus&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> kai </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Robin&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> children </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> hege</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.concat(stale</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> kai);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(hege);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Cecilie&#39;, &#39;Lone&#39;]</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(children); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Cecilie&#39;, &#39;Lone&#39;, &#39;Emil&#39;, &#39;Tobias&#39;, &#39;Linus&#39;, &#39;Robin&#39;]</span></span></code></pre></div><h3 id="splice-方法-插入、删除或替换数组的元素" tabindex="-1">splice() 方法：插入、删除或替换数组的元素 <a class="header-anchor" href="#splice-方法-插入、删除或替换数组的元素" aria-label="Permalink to &quot;splice() 方法：插入、删除或替换数组的元素&quot;">​</a></h3><p>功能强大，增删改都可以</p><p>可传递3个参数，splice(start, length, newItem)</p><ul><li>参数1：必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。添加从指定的开始位置进行添加，删除时会删除开始位置的元素</li><li>参数2：可选。规定应该删除多少元素。必须是非负整数，可以是 0。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素</li><li>参数3：可选。要添加到数组的新元素，新元素使用分隔符 , 隔开，数量不限</li><li>改变了原有数组，不会返回新数组</li></ul><h4 id="插入元素" tabindex="-1">插入元素 <a class="header-anchor" href="#插入元素" aria-label="Permalink to &quot;插入元素&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.splice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 0</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Lemon&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Kiwi&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Kiwi&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 从下标为 2 的元素开始，删除 0 个元素，插入指定新元素</span></span></code></pre></div><h4 id="删除元素" tabindex="-1">删除元素 <a class="header-anchor" href="#删除元素" aria-label="Permalink to &quot;删除元素&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.splice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 从下标为 2 的元素开始，删除 1 个元素</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.splice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 从下标为 2 的元素开始，后续全部删除</span></span></code></pre></div><h4 id="替换元素" tabindex="-1">替换元素 <a class="header-anchor" href="#替换元素" aria-label="Permalink to &quot;替换元素&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.splice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Lemon&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Kiwi&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Kiwi&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 从下标为 2 的元素开始，先删除 1 个元素，再插入指定新元素</span></span></code></pre></div><h3 id="slice-方法-从已有的数组中截取选定的元素-组成新的数组返回" tabindex="-1">slice() 方法：从已有的数组中截取选定的元素，组成新的数组返回 <a class="header-anchor" href="#slice-方法-从已有的数组中截取选定的元素-组成新的数组返回" aria-label="Permalink to &quot;slice() 方法：从已有的数组中截取选定的元素，组成新的数组返回&quot;">​</a></h3><p>传递两个参数，slice(start, end)</p><ul><li>参数 1：必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li><li>参数 2：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么截取的数组包含从 start 位置 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素</li><li>截取的范围是 [start, end)</li><li>截取方向为正向截取。指定位置的实际索引值较小的必须放在前面，否则截取的为 空数组</li><li>不会改变原数组，会返回新的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Lemon&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);      </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Orange&#39;, &#39;Lemon&#39;]</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);         </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr3 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">5</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;]</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(fruits);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span></span></code></pre></div><h2 id="_6-遍历方法" tabindex="-1">6. 遍历方法 <a class="header-anchor" href="#_6-遍历方法" aria-label="Permalink to &quot;6. 遍历方法&quot;">​</a></h2><h3 id="every-方法-检测数组所有元素是否都符合指定条件-通过函数提供" tabindex="-1">every() 方法：检测数组所有元素是否都符合指定条件（通过函数提供） <a class="header-anchor" href="#every-方法-检测数组所有元素是否都符合指定条件-通过函数提供" aria-label="Permalink to &quot;every() 方法：检测数组所有元素是否都符合指定条件（通过函数提供）&quot;">​</a></h3><p>传递两个参数：every(function(currentValue, index, arr){ }, thisValue)</p><ul><li>参数 1：必需，且必须是函数。<strong>函数还必须有返回值，返回当前元素在函数中根据自定义条件判断的结果（返回值必须是布尔值或者运算结果为布尔值或可以转换为布尔值的表达式）</strong></li></ul><blockquote><p>此函数的要求：</p><ul><li>参数 1：必需，进行条件判断的当前元素，数组中的每个元素都会被依次传入</li><li>参数 2：可选，当前元素的索引值</li><li>参数 3：可选，当期元素属于的数组对象</li><li>注意不要写成 箭头函数，否则无法指定当前函数的 this 指向；this 默认指向 window</li></ul></blockquote><ul><li>参数 2：可选。对象作为回调函数的 this 的值。如果省略了 thisValue，this 默认指向 window</li><li>对数组中的每个元素都执行一次指定的函数（callback），如果发现一个元素根据条件判断结果为 false，则 every 将返回 false，并且停止对后续元素的判断。如果回调函数对每个元素条件判断后都返回 true，every() 将返回 true。<strong>空数组不会执行此方法，并且它只对数组中的非空位置元素执行指定的函数，没有赋值或者已经删除的元素将被忽略</strong></li><li>不会改变现有的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 判断所有元素是否都小于 30</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ages </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">32</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 33</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 16</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 40</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> bool </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> ages</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.every(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (item) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 30</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">})</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(bool); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// false</span></span></code></pre></div><h3 id="some-方法-检测数组中的元素是否满足指定条件-通过函数提供" tabindex="-1">some() 方法：检测数组中的元素是否满足指定条件（通过函数提供） <a class="header-anchor" href="#some-方法-检测数组中的元素是否满足指定条件-通过函数提供" aria-label="Permalink to &quot;some() 方法：检测数组中的元素是否满足指定条件（通过函数提供）&quot;">​</a></h3><p>传递两个参数：some(function(currentValue, index, arr){ }, thisValue)</p><ul><li>参数 1：必需，且必须是函数。<strong>函数还必须有返回值，返回当前元素在函数中根据自定义条件判断的结果（返回值必须是布尔值或者运算结果为布尔值或可以转换为布尔值的表达式）</strong></li></ul><blockquote><p>此函数的要求：</p><ul><li>参数 1：必需，进行条件判断的当前元素，数组中的每个元素都会被依次传入</li><li>参数 2：可选，当前元素的索引值</li><li>参数 3：可选，当期元素属于的数组对象</li><li>注意不要写成 箭头函数，否则无法指定当前函数的 this 指向；this 默认指向 window</li></ul></blockquote><ul><li>参数 2：可选。对象作为回调函数的 this 的值。如果省略了 thisValue，this 默认指向 window</li><li>对数组中的每个元素都执行一次指定的函数（callback），如果发现一个元素根据条件判断结果为 true，则 some 将返回 true，并且停止对后续元素的判断。如果回调函数对每个元素条件判断后都返回 false，some() 将返回 false。<strong>空数组不会执行此方法，并且它只对数组中的非空位置的元素执行指定的函数，没有赋值或者已经删除的元素将被忽略</strong></li><li>不会改变现有的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 判断是否有元素小于 30</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ages </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">32</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 33</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 16</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 40</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> bool </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> ages</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.some(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (item) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 30</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">})</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(bool); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// true</span></span></code></pre></div><blockquote><p>every() 和 some() 类似，every 是所有元素都满足条件才返回 true，some 是只要有一个满足条件就返回 true IE 9 及其以上支持</p></blockquote><h3 id="filter-方法-在数组中筛选满足条件的元素-组成新数组返回" tabindex="-1">filter() 方法：在数组中筛选满足条件的元素，组成新数组返回 <a class="header-anchor" href="#filter-方法-在数组中筛选满足条件的元素-组成新数组返回" aria-label="Permalink to &quot;filter() 方法：在数组中筛选满足条件的元素，组成新数组返回&quot;">​</a></h3><p>传递两个参数：filter(function(currentValue, index, arr){ }, thisValue)</p><ul><li>参数 1：必需，且必须是函数。<strong>函数还必须有返回值，返回当前元素在函数中根据自定义条件判断的结果（返回值必须是布尔值或者运算结果为布尔值或可以转换为布尔值的表达式）</strong></li></ul><blockquote><p>此函数的要求：</p><ul><li>参数 1：必需，进行条件判断的当前元素，数组中的每个元素都会被依次传入</li><li>参数 2：可选，当前元素的索引值</li><li>参数 3：可选，当期元素属于的数组对象</li><li>注意不要写成 箭头函数，否则无法指定当前函数的 this 指向；this 默认指向 window</li></ul></blockquote><ul><li>参数 2：可选。对象作为回调函数的 this 的值。如果省略了 thisValue，this 默认指向 window</li><li>对数组中的每个元素都执行一次指定的函数（callback），在函数内部对每一个元素进行自定义条件判断。filter 方法会创建一个新的数组，该数组元素是所有在回调函数根据自定义判断结果返回值为 true 的原数组元素。<strong>空数组不会执行此方法，并且它只对数组中的非空位置元素执行指定的函数，没有赋值或者已经删除的元素将被忽略</strong></li><li>返回值是一个新数组，不会改变现有的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 获取小于 35 的元素</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ages </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">32</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 33</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 16</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 40</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> ages</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.filter(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (item) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 35</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">})</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(arr);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [32, 33, 16]</span></span></code></pre></div><h3 id="indexof-方法-返回某个指定的元素在数组指定范围内首次出现的位置" tabindex="-1">indexOf() 方法：返回某个指定的元素在数组指定范围内首次出现的位置 <a class="header-anchor" href="#indexof-方法-返回某个指定的元素在数组指定范围内首次出现的位置" aria-label="Permalink to &quot;indexOf() 方法：返回某个指定的元素在数组指定范围内首次出现的位置&quot;">​</a></h3><p>从数组的开头（或指定位置）开始查找，找到第一个相等的元素后返回该元素在整个数组中的对应索引值；找不到返回 -1。</p><p>传递两个参数：indexOf(item, start)</p><ul><li>参数 1： 必需，进行查找的元素</li><li>参数 2： 可选。开始查找的起始位置，默认为 0。合理取值是 [0, length)，且必须为整数。可接受负值，意为从倒数第几个开始</li><li>搜索是正方向进行的。</li><li>搜索范围是 [start, length)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">[</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Mango&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Apple&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> a </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 1</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">4</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 5</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> c </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;orange&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// -1</span></span></code></pre></div><h3 id="lastindexof-方法-返回某个指定的元素在数组指定范围内最后一次出现的位置" tabindex="-1">lastIndexOf()方法：返回某个指定的元素在数组指定范围内最后一次出现的位置 <a class="header-anchor" href="#lastindexof-方法-返回某个指定的元素在数组指定范围内最后一次出现的位置" aria-label="Permalink to &quot;lastIndexOf()方法：返回某个指定的元素在数组指定范围内最后一次出现的位置&quot;">​</a></h3><p>从数组的末尾（或指定位置）开始查找，找到第一个相等的元素后返回该元素在整个数组中的对应索引值；找不到返回 -1。</p><p>传递两个参数：lastIndexOf(item, start)</p><ul><li>参数 1： 必需，进行查找的元素</li><li>参数 2： 可选。开始查找的起始位置，默认为 0。合理取值是 [0, length)，且必须为整数。可接受负值，意为从倒数第几个开始</li><li>搜索是反方向进行的。</li><li>搜索范围是 [0, start]</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">[</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Mango&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Banana&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Apple&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> a </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 5</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 4</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 1</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> c </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;Orange&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 5</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> d </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;orange&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// -1</span></span></code></pre></div><h3 id="map-方法-返回一个新数组-数组中的元素为原始数组元素调用函数处理后的值" tabindex="-1">map() 方法：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值 <a class="header-anchor" href="#map-方法-返回一个新数组-数组中的元素为原始数组元素调用函数处理后的值" aria-label="Permalink to &quot;map() 方法：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值&quot;">​</a></h3><p>传递两个参数 map(function(currentValue, index, arr), thisValue)</p><ul><li>参数 1：必需，且必须是函数。<strong>函数还必须有返回值，返回当前元素在函数中根据自定义逻辑处理过程计算的结果</strong></li></ul><blockquote><p>此函数的要求：</p><ul><li>参数 1：必需，进行逻辑处理的当前元素，数组中的每个元素都会被依次传入</li><li>参数 2：可选，当前元素的索引值</li><li>参数 3：可选，当期元素属于的数组对象</li><li>注意不要写成 箭头函数，否则无法指定当前函数的 this 指向；this 默认指向 window</li></ul></blockquote><ul><li>参数 2：可选。对象作为回调函数的 this 的值。如果省略了 thisValue，this 默认指向 window</li><li>对数组中的每个元素都执行一次指定的函数（callback），在函数内部对每一个元素进行自定义逻辑处理。map 方法会创建一个新的数组，该数组元素是所有在回调函数根据自定义逻辑处理过程计算的结果的返回值。<strong>空数组不会执行此方法，并且它只对数组中的非空位置元素执行指定的函数，没有赋值或者已经删除的元素将被忽略</strong></li><li>返回值是一个新数组，不会改变现有的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 将数组中的每个元素都 乘以2，得到一个新数组</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fruits </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 4</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.map(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (item) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 2</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">})</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(arr); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [2, 4, 6, 8, 10, 12]</span></span></code></pre></div><h3 id="reduce-方法接收一个函数作为累加器-将数组中的每个值-从左到右-依次开始累加-最终计算为一个值" tabindex="-1">reduce() 方法接收一个函数作为累加器，将数组中的每个值（从左到右）依次开始累加，最终计算为一个值 <a class="header-anchor" href="#reduce-方法接收一个函数作为累加器-将数组中的每个值-从左到右-依次开始累加-最终计算为一个值" aria-label="Permalink to &quot;reduce() 方法接收一个函数作为累加器，将数组中的每个值（从左到右）依次开始累加，最终计算为一个值&quot;">​</a></h3><p>接受两个参数，reduce(function(total, currentValue, currentIndex, arr), initialValue)</p><ul><li>参数 1：必需，且必须是函数。<strong>函数还必须有返回值，返回每一次累加计算的结果</strong></li></ul><blockquote><ul><li>此函数的要求：</li><li>参数1：必需，含义为每一循环的累加起始值。上一次累加后的值会作为下一循环的累加起始值</li><li>参数2：必需，进行累加的当前元素，数组中的每个元素都会被依次传入</li><li>参数3：可选，当期元素属于的数组对象</li><li>参数4：可选，当前元素所属的数组对象</li></ul></blockquote><ul><li>参数2：可选。传递给函数的累加初始值，即 total 的默认值；若不传递，则为数组中第一个元素的值，同时 currentValue 从数组中的第二个值开始向函数内传递</li><li>对数组中的每个元素都执行一次指定的函数（callback），在函数内部对每一个元素与上一循环累加的结果（累计起始值）相加，同时将新的累加结果返回，作为下一循环的累计起始值。<strong>空数组不会执行此方法，并且它只对数组中的非空位置元素执行指定的函数，没有赋值或者已经删除的元素将被忽略</strong></li><li>返回值是数组元素累加的结果，不会改变现有的数组</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> nums </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 4</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> sum </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> nums</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.reduce(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (total</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> total </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 30</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(sum) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 51</span></span></code></pre></div><blockquote><p>reduce() 和 reduceRight() 作用相同。reduce() 是数组中从左向右累加，reduceRight() 是从右向左累加</p></blockquote><h3 id="foreach-方法-调用数组的每个元素-并将元素传递给回调函数。" tabindex="-1">forEach()方法：调用数组的每个元素，并将元素传递给回调函数。 <a class="header-anchor" href="#foreach-方法-调用数组的每个元素-并将元素传递给回调函数。" aria-label="Permalink to &quot;forEach()方法：调用数组的每个元素，并将元素传递给回调函数。&quot;">​</a></h3><p>传递两个参数 forEach(function(currentValue, index, arr), thisValue)</p><ul><li>参数1：必需，回调函数。</li></ul><blockquote><ul><li>此函数的要求：</li><li>参数 1：必需，进行逻辑处理的当前元素，数组中的每个元素都会被依次传入</li><li>参数 2：可选，当前元素的索引值</li><li>参数 3：可选，当期元素属于的数组对象</li><li>注意不要写成 箭头函数，否则无法指定当前函数的 this 指向；this 默认指向 window</li></ul></blockquote><ul><li>参数 2：可选。对象作为回调函数的 this 的值。如果省略了 thisValue，this 默认指向 window</li><li>对数组中的每个元素都执行一次指定的函数（callback），函数不需要设置返回值，只是依次让筛选出每个元素执行同一个操作</li><li>对于空数组是不会执行回调函数的</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> nums </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 4</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> sum </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">nums</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.forEach(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (item) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    sum </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> item;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">30</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(sum) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 21</span></span></code></pre></div>`,106)]))}const g=i(l,[["render",k]]);export{d as __pageData,g as default};
