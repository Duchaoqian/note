import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CgAj5nG9.js";const r=JSON.parse('{"title":"组件","description":"","frontmatter":{},"headers":[],"relativePath":"note/vue/14-组件.md","filePath":"note/vue/14-组件.md","lastUpdated":1751877942000}'),p={name:"note/vue/14-组件.md"};function t(h,s,k,e,B,F){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h1><h2 id="组件基础" tabindex="-1">组件基础 <a class="header-anchor" href="#组件基础" aria-label="Permalink to &quot;组件基础&quot;">​</a></h2><ol><li>组件 组件名称 多个单词之间用短横线来连接<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">com-a</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">com-a</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li>单标签形式书写 在单文件组件中有用<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">com-a</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> /&gt;</span></span></code></pre></div></li><li>组件包含了 html css js 的代码块 主要是对页面中某个功能块的封装 实现功能模块的复用</li><li>全局注册<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comA </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 模板</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> \`</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">         &lt;p&gt;a组件&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">         \`</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // app.component(组件名称, 组件对象)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // 可以使用驼峰命名法 也可使用&quot;-&quot;连接</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">   app</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.component(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;comA&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comA)</span></span></code></pre></div></li><li>局部注册<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // 局部注册</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   components</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">      &#39;com-b&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">: comB</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">      &#39;com-a&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">: comA</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li><li>内部注册<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comB </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> \`</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">               &lt;p&gt;我是组件B&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">               &lt;com-a&gt;&lt;/com-a&gt;</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">               \`</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // components: {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //  &#39;com-a&#39;: comA</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li></ol><h2 id="组件模板" tabindex="-1">组件模板 <a class="header-anchor" href="#组件模板" aria-label="Permalink to &quot;组件模板&quot;">​</a></h2><ol><li>使用 script 定义组件模板 <ol><li>默认不支持 html 代码 修改标签类型 type=&quot;text/html&quot;</li><li><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;text/html&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;com-b&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;我是b组件&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;我是b组件内容&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">com-c</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">com-c</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comB </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;#com-b&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      components: {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         comC</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li></ol></li><li>使用 template 标签 创建组件模板 <ol><li><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;com-c&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;我是c组件&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;我是c组件的内容&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comC </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;#com-c&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // 全局注册 无论在那个组件都可以用</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">   app</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.component(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;comC&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comC)</span></span></code></pre></div></li></ol></li><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> comA </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> \`&lt;p&gt;我是a组件&lt;/p&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li><li>根组件 也是一个组件只不过是 最底层的组件</li><li>全局注册与局部注册 <ol><li>全局注册 无论在那个组件都可以用</li><li>局部注册 只能在当前组件可用</li></ol></li></ol><h2 id="组件中的-data-数据" tabindex="-1">组件中的 data 数据 <a class="header-anchor" href="#组件中的-data-数据" aria-label="Permalink to &quot;组件中的 data 数据&quot;">​</a></h2><ol><li>组件中的 data 数据是不能共用的</li><li>只能在当前组件使用</li><li>组件中的内容只能在当前组件中使用</li><li>子组件无法用根组件的数据</li></ol><h2 id="特殊标签内的组件" tabindex="-1">特殊标签内的组件 <a class="header-anchor" href="#特殊标签内的组件" aria-label="Permalink to &quot;特殊标签内的组件&quot;">​</a></h2><p>使用is属性</p><ul><li>例如：is=&quot;vue:组件名&quot; 将标签替换为我们想要的组件</li></ul><h2 id="组件传值数据验证" tabindex="-1">组件传值数据验证 <a class="header-anchor" href="#组件传值数据验证" aria-label="Permalink to &quot;组件传值数据验证&quot;">​</a></h2><ol><li>props 用来接收父组件传递过来的参数</li><li>props: [&#39;msg&#39;] // 可以定义多个属性名称用来接收数据 是以字符串的形式书写</li><li>对象形式分类 <ol><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   msg</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span></code></pre></div></li><li>多类型</li><li>必传项</li><li>默认值</li><li>自定义验证器</li></ol></li><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   props</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // msg属性接收字符串类型的数据</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 不满足这个数据类型就会报警告</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // msg: String,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 多类型 只要是String, Number</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // msg: [String, Number]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 必传项</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // msg: {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //   type: Boolean,</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // required 值为true 就表示 是一个必传项</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //   required: true</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 默认值</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      msg</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         type</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // default: &#39;我是默认值&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         default</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">() {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;我是默认值&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      obj</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         type</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // 对象或者数组指定默认值必须写成工厂函数形式</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         //   default: { name: &#39;ls&#39;, age: 20 }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         default</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">() {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;ls&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      foo</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         type</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         //   default: function(){}</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // default() {} 就是foo的默认值</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         default</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">() {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">         console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;默认方法执行了&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      sex</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // 自定义验证器</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         validator(value) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // console.log(value)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // 传递的值必须是0，1，2 其中的一个</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         // 返回ture 验证通过 返回false 验证不通过</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">0</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">].includes(value)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span></code></pre></div></li></ol><h2 id="组件继承" tabindex="-1">组件继承 <a class="header-anchor" href="#组件继承" aria-label="Permalink to &quot;组件继承&quot;">​</a></h2><ol><li>在组件上定义的属性没有接收就会默认展示在子组件的根标签</li><li><blockquote><p>v-bind=&quot;$attrs&quot; 将属性添加到指定的标签元素上</p></blockquote></li><li>简写形式<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> :</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;$attrs&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;我是子组件&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li>默认 多个根标签则 属性没有被添加</li><li>需要添加时使用 <code>:=&quot;$attrs&quot;</code> 添加就可以了</li><li>组件接收数据依赖于标签的属性 props</li><li>inheritAttrs <ol><li>用来控制组件属性是否应该被继承道标签上</li><li>手动添加的属性是不会被禁止的</li></ol></li></ol>`,14)]))}const g=i(p,[["render",t]]);export{r as __pageData,g as default};
