import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CgAj5nG9.js";const d=JSON.parse('{"title":"构造函数","description":"","frontmatter":{},"headers":[],"relativePath":"note/JavaScript/构造函数.md","filePath":"note/JavaScript/构造函数.md","lastUpdated":null}'),p={name:"note/JavaScript/构造函数.md"};function l(k,s,t,e,F,B){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h1><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1. 概述&quot;">​</a></h2><p>在典型的oop的语言中（如：java），都存在类的概念，类就是对象的模版。对象就是类的实例，但在es6之前，js中并没有引入类的概念。</p><p>在es6之前，对象不是基于类创建的，而是用一种称为构造函数的特殊函数来定义对象和它们的特征</p><p>创建对象可以通过下列三种方法</p><ol><li>对象的字面量</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {}</span></span></code></pre></div><ol start="2"><li>new Object()</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Object()</span></span></code></pre></div><ol start="3"><li>自定义构造函数</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People(uname</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.uname </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> uname</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会唱歌&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> zs </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;张三&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(zs)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">zs</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing()</span></span></code></pre></div><h2 id="_1-0-工厂函数" tabindex="-1">1.0 工厂函数 <a class="header-anchor" href="#_1-0-工厂函数" aria-label="Permalink to &quot;1.0 工厂函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // 工厂模式</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> createPeople(username</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {};</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        obj</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.username </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> username;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        obj</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        obj</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.school </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;智游&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        obj</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.eat </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我在吃饭&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> p1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> createPeople(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;章三&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(p1);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    p1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.eat()</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> p2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> createPeople(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;李四&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 17</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(p2);</span></span></code></pre></div><h2 id="_1-1-构造函数" tabindex="-1">1.1 构造函数 <a class="header-anchor" href="#_1-1-构造函数" aria-label="Permalink to &quot;1.1 构造函数&quot;">​</a></h2><p>构造函数是一种特殊的函数，主要是用来初始化对象，即为对象成员变量赋初始值，他总是与new一起使用，我们可以把 对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面</p><p>在js中，使用构造函数要注意一下两点，</p><ol><li>构造函数用于创建某一类对象，其首字母要大写</li><li>构造函数要和new 一起使用才有意义</li></ol><p><strong>new在执行时会做四件事情:</strong></p><ul><li>①在内存中创建一个新的空对象。</li><li>②让this指向这个新的对象。</li><li>③执行构造函数里面的代码。给这个新对象添加属性和方法。</li><li>④返回这个新对象(所以构造函数里面不需要return ) .</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//构造函数中的属性和方法我们称之为成员，成员可以添加</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People(uname</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.uname </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> uname</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会唱歌&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> zs </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;张三&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(zs)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">zs</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing()</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing()</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//实例成员就是构造函数内部通过this添加的成员uname age sing 就是实例成员</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//实例成员只能通过实例化的对象来访问 不能通过构造函数来访问实例成员</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 在构造函数本身上添加的 sex 就是静态成员</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sex </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;男&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 静态成员只能通过构造函数来访问</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">zs</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sex)</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//不能通过对象来访问</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sex)</span></span></code></pre></div><p>JavaScript的构造函数中可以添加一些成员 ,可以在构造函数本身上添加,也可以在构造函数内部的this上添 加。通过这两种方式添加的成员,就分别称为静态成员和实例成员。</p><ul><li>静态成员:在构造函数本上添加的成员称为静态成员。只能由构造函数本身来访问</li><li>实例成员:在构造函数内部创建的对象成员称为实例成员,只能由实例化的对象来访问</li></ul><h2 id="_1-2构造函数的问题" tabindex="-1">1.2构造函数的问题 <a class="header-anchor" href="#_1-2构造函数的问题" aria-label="Permalink to &quot;1.2构造函数的问题&quot;">​</a></h2><p>构造函数方法很好用。但是存在浪费内存的问题。</p><p>我们希望所有的对象使用同一个函数,这样就比较节省内存，那么我们要怎样做呢?</p><h2 id="_1-3构造函数原型prototype" tabindex="-1">1.3构造函数原型prototype <a class="header-anchor" href="#_1-3构造函数原型prototype" aria-label="Permalink to &quot;1.3构造函数原型prototype&quot;">​</a></h2><p>构造函数通过原型分配的函数是所有对象所共享的</p><p>JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。注意这个prototype就是一 个对象,这个对象的所有属性和方法,都会被构造函数所拥有。</p><p>我们可以把那些不变的方法,直接定义在prototype对象上,这样所有对象的实例就可以共享这些方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//1.构造函数的问题。</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Star(uname</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.uname </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> uname ;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // this.sing = function() {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    //   console.log( &#39;R24&#39; );</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Star</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">() {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会唱歌&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ldh </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Star(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;xi4&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> zxy </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Star(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;张学友’，19);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">ldh</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> zxy</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing);</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.dir(Star);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 一般情况下，我们的公共属性定义到构造函数里面，公共的方法我们放到原型对象身上</span></span></code></pre></div><ol><li>原型是什么?</li></ol><p>一个对象。我们也称为prototype为原型对象。</p><p>2.原型的作用是什么?</p><p>共享方法。</p><p>1.4 对象原型__proto__</p><p>对象都会有一个属性__proto__指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法。就是因为对象有_ proto_ 原型的存在。</p><p>对象身上系统自己添加一个__proto__指向我们构造函数的原型对象</p><p><strong>proto</strong> 对象原型和原型对象prototype是等价的</p><p>方法的查找规则， 首先先看当前对象身上是否有制定的方法，如果有就执行这个对象上的方法，如果没有这个方法 因为我们的__proto__的存在，就去构造函数原型对象prototype身上去查找对应的方法</p><p>__proto__对象原型的意义就在于为对象的查找机制提供一个方向,或者说一条路线，但是它是一一个非标准属性。 因此实际开发中，不可以使用这个属性,它只是内部指向原型对象prototype</p><h2 id="_1-5-constructor-构造函数" tabindex="-1">1.5 constructor 构造函数 <a class="header-anchor" href="#_1-5-constructor-构造函数" aria-label="Permalink to &quot;1.5 constructor  构造函数&quot;">​</a></h2><p>对象原型(<strong>proto</strong>) 和构造函数(prototype)原型对象里面都有一个属性constructor属性, constructor我们称为构造函数,因为它指回构造函数本身。</p><p>constructor主要用于记录该对象引用于哪个构造函数,它可以让原型对象重新指向原来的构造函数。</p><p>很多情况下，我们需要手动的利用constructor 这个属性指向 原来的构造函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.sing </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会唱歌&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.movie </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会演电影&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">People</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    //如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    指回原来的构造函数</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> People</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    sing</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会唱歌&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    movie</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">        console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我会演电影&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><h2 id="_1-6-构造函数、实例、原型对象三者之间的关系" tabindex="-1">1.6 构造函数、实例、原型对象三者之间的关系 <a class="header-anchor" href="#_1-6-构造函数、实例、原型对象三者之间的关系" aria-label="Permalink to &quot;1.6 构造函数、实例、原型对象三者之间的关系&quot;">​</a></h2><h2 id="_1-7-原型链" tabindex="-1">1.7 原型链 <a class="header-anchor" href="#_1-7-原型链" aria-label="Permalink to &quot;1.7 原型链&quot;">​</a></h2><ol><li>只要是对象就有__proto__ 原型，指向原型对象</li><li>构造函数里面的原型对象（prototype）的__proto__原型指向的是 Object.prototype</li></ol><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>使用call 函数 call 函数就相当于是调用了 函数 call 第一个参数传的是this 后面传的参数是函数中的参数</p><p>使用apply 函数 applyy 也相当于是调用了这个函数 apply 函数第一个参数也是this指向 apply 第二个参数是一个数组 里面的每个元素也是函数的每个参数</p><p>bind 函数 相当于是 复制了原来的函数 返回一个新的函数 但是这个新的函数是修改过this 的一个函数</p><h3 id="构造函数继承属性" tabindex="-1">构造函数继承属性 <a class="header-anchor" href="#构造函数继承属性" aria-label="Permalink to &quot;构造函数继承属性&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father (name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.name </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son(name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    Father</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.call(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>使用 call 函数调用父构造函数 修改this指向 即可实现继承父构造函数的属性</p><h3 id="构造函数继承方法" tabindex="-1">构造函数继承方法 <a class="header-anchor" href="#构造函数继承方法" aria-label="Permalink to &quot;构造函数继承方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father (name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.name </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Father</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.money </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;我有100元钱&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son(name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    Father</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.call(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">age)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// Son.prototype = Father.prototype</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 儿子的原型和父亲的原型是一个原型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// Son.prototype.goSchool = function (){</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> //    console.log(&quot;我要去上学&quot;) </span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // 只有儿子需要上学 此方法应该只有 子类才有 但是因为我们子类和父类共用一个原型 就会造成子类的方法在父类中也有</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//}</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Father()</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 创建实例 因为我们的实例对象中也可以使用父类的方法</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Son</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Son</span></span></code></pre></div>`,57)]))}const g=i(p,[["render",l]]);export{d as __pageData,g as default};
