import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CgAj5nG9.js";const r=JSON.parse('{"title":"1. 基本用法","description":"","frontmatter":{},"headers":[],"relativePath":"note/实用工具/mock.md","filePath":"note/实用工具/mock.md","lastUpdated":1751877942000}'),p={name:"note/实用工具/mock.md"};function k(l,s,t,e,B,F){return n(),a("div",null,s[0]||(s[0]=[h(`<p>在开发过程中，在前端准备调后端接口时，如果发现后端接口还没开发完成，则可以使用 Mock 这一种模拟后端接口的解决方案，可以让前端提前调用模拟接口，完成前端开发。</p><p>Mock 有以下特点：</p><p>前后端分离：让前端攻城师独立于后端进行开发 增加单元测试的真实性：通过随机数据，模拟各种场景 开发无侵入：不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据 用法简单：符合直觉的接口 数据类型丰富：支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等 方便扩展：支持支持扩展更多数据类型，支持自定义函数和正则</p><h1 id="_1-基本用法" tabindex="-1">1. 基本用法 <a class="header-anchor" href="#_1-基本用法" aria-label="Permalink to &quot;1. 基本用法&quot;">​</a></h1><p>Mock 有两种使用方式：</p><p>搭配开发服务器创建 Mock 数据接口返回数据 单独使用，拦截页面的 ajax 请求返回数据</p><h2 id="_1-1-安装" tabindex="-1">1.1 安装 <a class="header-anchor" href="#_1-1-安装" aria-label="Permalink to &quot;1.1 安装&quot;">​</a></h2><p>使用以下命令进行安装：</p><p><code>$ npm i mockjs -D</code></p><h2 id="_1-2-基本用法" tabindex="-1">1.2 基本用法 <a class="header-anchor" href="#_1-2-基本用法" aria-label="Permalink to &quot;1.2 基本用法&quot;">​</a></h2><p>使用提供的 mock 方法创建模拟数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> Mock</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;mockjs&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock(</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">/* ... */</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span></code></pre></div><h2 id="_1-3-数据创建" tabindex="-1">1.3 数据创建 <a class="header-anchor" href="#_1-3-数据创建" aria-label="Permalink to &quot;1.3 数据创建&quot;">​</a></h2><h3 id="_1-3-1-语法规范" tabindex="-1">1.3.1 语法规范 <a class="header-anchor" href="#_1-3-1-语法规范" aria-label="Permalink to &quot;1.3.1 语法规范&quot;">​</a></h3><h3 id="数据模板定义规范" tabindex="-1">数据模板定义规范 <a class="header-anchor" href="#数据模板定义规范" aria-label="Permalink to &quot;数据模板定义规范&quot;">​</a></h3><p>数据模板中的每个属性由 3 部分构成：属性名（name）、生成规则（rule）、属性值（value）。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &#39;name|rule&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> value </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>其中，name 为实际生成数据的属性名，rule 为定义生成随机数据的规则，value 为定义字段的初始值，或基础值。</p><p>注意：name 和 rule 之间要使用 | 分隔开。</p><h3 id="数据占位符定义规范" tabindex="-1">数据占位符定义规范 <a class="header-anchor" href="#数据占位符定义规范" aria-label="Permalink to &quot;数据占位符定义规范&quot;">​</a></h3><p>占位符只是在属性值字符串中匹配某种数据生成规则，作为 value 模版的一部分，自身并会不出现在最终的属性值中。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &#39;name|rule&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> &#39;@占位符&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &#39;name|rule&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> &#39;@占位符(参数[</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> 参数</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ...])&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><h3 id="_1-3-2-数据创建语法示例" tabindex="-1">1.3.2 数据创建语法示例 <a class="header-anchor" href="#_1-3-2-数据创建语法示例" aria-label="Permalink to &quot;1.3.2 数据创建语法示例&quot;">​</a></h3><p>&#39;name|min-max&#39;: string：通过重复 string 生成字符串，其中 min 和 max 分别表示字符串的最小和最大长度</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock({</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">    &quot;string|1-10&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;★&quot;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span></code></pre></div><p>生成数据为：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">  &quot;string&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;★★★★★★★★&quot;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>&#39;name|min-max&#39;: number：生成制定范围的数字，其中 min 和 max 分别表示限制数字的最小值和最大值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock({</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">    &quot;number|1-100&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 100</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span></code></pre></div><p>生成数据为：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">    &quot;number&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 34</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>@id()、@guid()：id 占位符，用于生成指定格式的随机 id 值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock({</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">    &quot;id&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;@id()&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 身份证号</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">    &quot;guid&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;@guid()&quot;</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // UUID</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});</span></span></code></pre></div><p>生成数据为：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> &#39;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">450000200609051706</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    guid</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> &#39;e</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">8</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">cdF</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">4-0</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">ee</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">4-921</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">e-ce</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">D-FBE</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">8</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">bBc</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">8932</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">C&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>更多数据模版和占位符用法见<a href="http://mockjs.com/examples.html" target="_blank" rel="noreferrer">官网</a>。</p><h2 id="_2-场景使用" tabindex="-1">2. 场景使用 <a class="header-anchor" href="#_2-场景使用" aria-label="Permalink to &quot;2. 场景使用&quot;">​</a></h2><h3 id="_2-1-独立使用" tabindex="-1">2.1 独立使用 <a class="header-anchor" href="#_2-1-独立使用" aria-label="Permalink to &quot;2.1 独立使用&quot;">​</a></h3><p>在开发环境中，可以不搭配任何开发工具，甚至也可以不需要搭建服务器环境，就可以直接使用 Mock 为 ajax 请求返回模拟数据。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;!</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">DOCTYPE</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> html&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;en&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;UTF-8&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">meta</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;X-UA-Compatible&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;IE=edge&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;Mock&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;https://cdn.bootcdn.net/ajax/libs/Mock.js/1.0.0/mock-min.js&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // 为指定的 url 地址请求设置响应数据</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;/api/user&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">        &#39;id&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;@guid()&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">        &#39;username&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;@cname()&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    $</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.ajax({</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        method</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;GET&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        url</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;/api/user&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        success(res) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(res);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    });</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><p>也可以使用 <a href="https://www.npmjs.com/package/jquery-mockjax" target="_blank" rel="noreferrer">jquery-mockjax</a> 实现更多的功能</p><p>2.2 搭配开发服务器使用 Mock 更多的使用场景是搭配 node 环境下的开发服务器使用，只是作为单纯的数据创建方法。</p><p>以 webpack 的 devSever.onBeforeSetupMiddleware 配置为例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> Mock</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> require(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;mockjs&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    mode</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;development&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    devServer</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        port</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3000</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        open</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        onBeforeSetupMiddleware({ app }) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            app</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.get(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;/api/user&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (req</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> res) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">                let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> Mock</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.mock({</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">                    &quot;id&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;@id()&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">                    &quot;guid&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;@guid()&quot;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">                });</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">                res</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.json(data);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            });</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">    }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>将返回模拟数据的接口创建在 devSever 自身创建的服务器对象上，可以避免跨域问题。</p>`,45)]))}const g=i(p,[["render",k]]);export{r as __pageData,g as default};
