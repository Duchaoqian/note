import{_ as i,c as a,o as h,ag as n}from"./chunks/framework.CgAj5nG9.js";const B=JSON.parse('{"title":"字符串常用方法","description":"","frontmatter":{},"headers":[],"relativePath":"note/JavaScript/字符串常用方法.md","filePath":"note/JavaScript/字符串常用方法.md","lastUpdated":null}'),l={name:"note/JavaScript/字符串常用方法.md"};function t(k,s,p,e,F,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="字符串常用方法" tabindex="-1">字符串常用方法 <a class="header-anchor" href="#字符串常用方法" aria-label="Permalink to &quot;字符串常用方法&quot;">​</a></h1><h2 id="_1-字符串类型转换" tabindex="-1">1. 字符串类型转换 <a class="header-anchor" href="#_1-字符串类型转换" aria-label="Permalink to &quot;1. 字符串类型转换&quot;">​</a></h2><h3 id="将任何类型的数据都转换为字符串-你可以用下面三种方法的任何一种" tabindex="-1">将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种 <a class="header-anchor" href="#将任何类型的数据都转换为字符串-你可以用下面三种方法的任何一种" aria-label="Permalink to &quot;将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> num </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 10</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.toString();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> String(num);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> num;</span></span></code></pre></div><h2 id="_2-字符串分割" tabindex="-1">2. 字符串分割 <a class="header-anchor" href="#_2-字符串分割" aria-label="Permalink to &quot;2. 字符串分割&quot;">​</a></h2><h3 id="split-用于分割字符串-执行后返回一个数组" tabindex="-1">split() 用于分割字符串，执行后返回一个数组 <a class="header-anchor" href="#split-用于分割字符串-执行后返回一个数组" aria-label="Permalink to &quot;split() 用于分割字符串，执行后返回一个数组&quot;">​</a></h3><ul><li>参数1：是根据指定内容进行截断，并且该内容会去除</li><li>参数2：指定返回数组的长度，可选。若指定长度小于等于实际分割长度，则按分割结果从索引值 0 位置截取指定长度数组返回；若指定长度超出实际分割长度，则返回实际分割数组，不会额外加长。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;I,love,you,Do,you,love,me&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.split(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;,&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;I&#39;,&#39;love&#39;,&#39;you&#39;,&#39;do&#39;,&#39;you&#39;,&#39;love&#39;,&#39;me&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.split(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;,&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;I&#39;,&#39;love&#39;,&#39;you&#39;]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.split(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;,&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 13</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&#39;I&#39;,&#39;love&#39;,&#39;you&#39;,&#39;do&#39;,&#39;you&#39;,&#39;love&#39;,&#39;me&#39;]</span></span></code></pre></div><h2 id="_3-查询子字符串" tabindex="-1">3. 查询子字符串 <a class="header-anchor" href="#_3-查询子字符串" aria-label="Permalink to &quot;3. 查询子字符串&quot;">​</a></h2><h3 id="indexof-返回某个字符在字符串指定范围内首次出现的位置" tabindex="-1">indexOf()：返回某个字符在字符串指定范围内首次出现的位置 <a class="header-anchor" href="#indexof-返回某个字符在字符串指定范围内首次出现的位置" aria-label="Permalink to &quot;indexOf()：返回某个字符在字符串指定范围内首次出现的位置&quot;">​</a></h3><p>从字符串的开头（或指定位置）开始查找，找到第一个匹配的子字符串后返回该子字符（串）的首字符在整个字符串中的对应索引值；找不到返回 -1。</p><p>传递两个参数：indexOf(str, start)</p><ul><li>参数 1： 必需，进行查找的字符</li><li>参数 2： 可选。开始查找的起始位置，默认为0。合理取值是 [0, length)，且必须为整数。</li><li>查找是正方向进行的。</li><li>查找范围是 [start, length)</li></ul><blockquote><p>参数 2 是可以为 任意整数的，即使指定位置不存在字符。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;love&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 2</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;lave&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);    </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// -1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.indexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;love&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 3</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 18</span></span></code></pre></div><h3 id="lastindexof-返回某个字符在字符串指定范围内最后一次出现的位置" tabindex="-1">lastIndexOf()：返回某个字符在字符串指定范围内最后一次出现的位置 <a class="header-anchor" href="#lastindexof-返回某个字符在字符串指定范围内最后一次出现的位置" aria-label="Permalink to &quot;lastIndexOf()：返回某个字符在字符串指定范围内最后一次出现的位置&quot;">​</a></h3><p>从字符串的末尾（或指定位置）开始查找，找到第一个匹配的子字符串后返回该子字符（串）的首字符在整个字符串中的对应索引值；找不到返回 -1。对应的索引值仍是正序位置</p><p>传递两个参数：lastIndexOf(str, start)</p><ul><li>参数 1： 必需，进行查找的字符</li><li>参数 2： 可选。开始查找的起始位置，默认为字符的长度。合理取值是 [0, length)，且必须为整数</li><li>查找方向是反方向进行的</li><li>查找范围是 [0, start)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;love&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 18</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;lave&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// -1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.lastIndexOf(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;love&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 16</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 2</span></span></code></pre></div><blockquote><p>参数 2 是可以为 任意整数的，即使指定位置不存在字符。这两个方法中负整数没有倒数位置的含义，正常取值范围为 [0, length)</p></blockquote><h2 id="_4-字符串替换" tabindex="-1">4. 字符串替换 <a class="header-anchor" href="#_4-字符串替换" aria-label="Permalink to &quot;4. 字符串替换&quot;">​</a></h2><h3 id="replace-有两个参数-执行后返回新的字符串" tabindex="-1">replace() 有两个参数，执行后返回新的字符串 <a class="header-anchor" href="#replace-有两个参数-执行后返回新的字符串" aria-label="Permalink to &quot;replace() 有两个参数，执行后返回新的字符串&quot;">​</a></h3><ul><li>参数 1：需要被替换的子字符串，可以是指定字符串，还可以是<strong>正则表达式</strong>。对于正则表达式来说首先会根据是否全局匹配（全局/.../g）决定替换行为，如果是全部的则替换全部替换，非全局的只有替换首个匹配的字符串。</li><li>参数 2：替换字符串或<strong>生成替换字符串的函数</strong>。推荐使用函数。每次匹配到进行替换时都会执行该函数，返回值作为替换的新值。</li></ul><blockquote><p>参数 2 如果为函数，则函数参数的规定：</p><ul><li>参数 1 为每次匹配到的子字符串</li><li>参数 2 为匹配到的子字符串的首字符的索引值位置</li><li>参数 3 为进行匹配替换的字符串本身</li></ul></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 普通用法，只替换第一个</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;I,love,you,Do,you,love,me&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.replace(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;love&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;hate&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;I,hate,you,do,you,love,me&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 正则全局替换</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;I,love,you,Do,you,love,me&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.replace(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">/love/</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;hate&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;I,hate,you,do,you,hate,me&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 复杂使用</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &quot;I,love,you,Do,you,love,me&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> i </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">result </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.replace(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">/o/</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> () {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">i;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">});  </span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// I,l1ve,y2u,D3,y4u,l5ve,me</span></span></code></pre></div><h2 id="_5-查找指定位置的字符或其字符编码值" tabindex="-1">5. 查找指定位置的字符或其字符编码值 <a class="header-anchor" href="#_5-查找指定位置的字符或其字符编码值" aria-label="Permalink to &quot;5. 查找指定位置的字符或其字符编码值&quot;">​</a></h2><p>查找位置取值范围为 [0, length)，必须为整数</p><h3 id="charat-查找指定位置字符" tabindex="-1">charAt() 查找指定位置字符 <a class="header-anchor" href="#charat-查找指定位置字符" aria-label="Permalink to &quot;charAt() 查找指定位置字符&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.charAt(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">8</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;o&#39; 字符串索引值从 0 开始</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.charAt(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">58</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;&#39;  超出查找范围返回 空字符串，不是 null</span></span></code></pre></div><h3 id="charcodeat-查找指定位置字符的编码值-ascii码-区分字母大小写-返回数据类型是-数字" tabindex="-1">charCodeAt() 查找指定位置字符的编码值（ASCII码），区分字母大小写，返回数据类型是 数字 <a class="header-anchor" href="#charcodeat-查找指定位置字符的编码值-ascii码-区分字母大小写-返回数据类型是-数字" aria-label="Permalink to &quot;charCodeAt() 查找指定位置字符的编码值（ASCII码），区分字母大小写，返回数据类型是 数字&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.charCodeAt(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">8</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 111</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">char </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.charCodeAt(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">58</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// NaN 超出范围返回 NaN</span></span></code></pre></div><h2 id="_6-字符串连接" tabindex="-1">6. 字符串连接 <a class="header-anchor" href="#_6-字符串连接" aria-label="Permalink to &quot;6. 字符串连接&quot;">​</a></h2><h3 id="使用-号连接" tabindex="-1">使用 + 号连接 <a class="header-anchor" href="#使用-号连接" aria-label="Permalink to &quot;使用 + 号连接&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;Hello&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39; World&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2;   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;Hello World&#39;;</span></span></code></pre></div><h3 id="concat-连接方法-可以有传递多个参数-合并多个字符串" tabindex="-1">concat() 连接方法，可以有传递多个参数，合并多个字符串 <a class="header-anchor" href="#concat-连接方法-可以有传递多个参数-合并多个字符串" aria-label="Permalink to &quot;concat() 连接方法，可以有传递多个参数，合并多个字符串&quot;">​</a></h3><p>若参数为费字符串，则方法内部会先强制转为字符串，然后拼接。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39; Love&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str3 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39; You&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str4 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { str</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;too&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.concat(str2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str3</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str4);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// I Love You[object Object]</span></span></code></pre></div><h2 id="_7-字符串切割和提取" tabindex="-1">7. 字符串切割和提取 <a class="header-anchor" href="#_7-字符串切割和提取" aria-label="Permalink to &quot;7. 字符串切割和提取&quot;">​</a></h2><h3 id="slice-提取字符串的某个部分-并以新的字符串返回被提取的部分。" tabindex="-1">slice() 提取字符串的某个部分，并以新的字符串返回被提取的部分。 <a class="header-anchor" href="#slice-提取字符串的某个部分-并以新的字符串返回被提取的部分。" aria-label="Permalink to &quot;slice() 提取字符串的某个部分，并以新的字符串返回被提取的部分。&quot;">​</a></h3><p>传递两个参数：slice(start, end)</p><ul><li>参数1：截取的起始位置，必需</li><li>参数2：截取的结束位置，可选。<strong>若未指定此参数，则要提取的子字符串包括 start 到原字符串结尾的字符串。</strong></li><li>参数可以是负数，那么它规定的是从字符串的尾部开始算起的位置。（从尾部开始算是从 -1 开始的）</li><li>实际索引值较小的位置必须写在前面，否则结果为 空字符串</li><li>剩余字符串区段是 [start, end)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;0123456789&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);      </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;23456789&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;2345&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str3 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;89&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str4 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.slice(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">6</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">4</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;45&#39;</span></span></code></pre></div><h3 id="substr-方法可在字符串中抽取从开始索引值开始的指定数目的字符-作为一个新的字符串返回" tabindex="-1">substr() 方法可在字符串中抽取从开始索引值开始的指定数目的字符，作为一个新的字符串返回 <a class="header-anchor" href="#substr-方法可在字符串中抽取从开始索引值开始的指定数目的字符-作为一个新的字符串返回" aria-label="Permalink to &quot;substr() 方法可在字符串中抽取从开始索引值开始的指定数目的字符，作为一个新的字符串返回&quot;">​</a></h3><p>传递两个参数：substr(start, length)</p><ul><li>参数 1：截取的起始位置，必须。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。</li><li>参数 2：截取的长度，可选。如果省略了该参数，那么返回从指定的开始位置到结尾的字串。</li><li>截取的长度区段都是正向的。如果指定的长度超过剩余长度，返回剩余的子字符串</li><li>剩余的字符串区段是 [start, start + length)</li><li>ECMAscript 没有对该方法进行标准化，因此反对使用它。但是所有浏览器都支持。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;0123456789&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substr(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;23456&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substr(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">7</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 5</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;34567&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str3 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substr(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">3</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);      </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;3456789&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str4 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substr(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">3</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;789&#39;</span></span></code></pre></div><h3 id="substring-方法用于提取两个指定索引值之间的子字符串。" tabindex="-1">substring() 方法用于提取两个指定索引值之间的子字符串。 <a class="header-anchor" href="#substring-方法用于提取两个指定索引值之间的子字符串。" aria-label="Permalink to &quot;substring() 方法用于提取两个指定索引值之间的子字符串。&quot;">​</a></h3><p>传递两个参数：substring(start, end)</p><ul><li>参数1：截取的起始位置。必需。非负整数。</li><li>参数2：截取的结束位置。非必需，非负整数。如果省略该参数，那么返回的子字符串会一直到字符串的结尾。</li><li>索引值较小的位置必须写在前面</li><li>剩余字符串区段是 [start, end)</li><li>只能正向截取，是 slice 的阉割版</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;0123456789&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substring(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 6</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;2345&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str2 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.substring(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">2</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">);     </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;23456789&#39;</span></span></code></pre></div><h2 id="_8-字符串大小写转换" tabindex="-1">8. 字符串大小写转换 <a class="header-anchor" href="#_8-字符串大小写转换" aria-label="Permalink to &quot;8. 字符串大小写转换&quot;">​</a></h2><h3 id="大写转小写-tolowercase" tabindex="-1">大写转小写 toLowerCase() <a class="header-anchor" href="#大写转小写-tolowercase" aria-label="Permalink to &quot;大写转小写 toLowerCase()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;HELLO WORLD&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.toLowerCase(); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;hello world&#39;</span></span></code></pre></div><h3 id="小写转大写-touppercase" tabindex="-1">小写转大写 toUpperCase() <a class="header-anchor" href="#小写转大写-touppercase" aria-label="Permalink to &quot;小写转大写 toUpperCase()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;hello world&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.toUpperCase();   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;HELLO WORLD&#39;</span></span></code></pre></div><h2 id="_9-字符串匹配" tabindex="-1">9. 字符串匹配 <a class="header-anchor" href="#_9-字符串匹配" aria-label="Permalink to &quot;9. 字符串匹配&quot;">​</a></h2><h3 id="match-方法-在字符串内检索指定的值-或找到一个或多个正则表达式的匹配。返回一个由匹配结果组成的数组" tabindex="-1">match() 方法：在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。返回一个由匹配结果组成的数组 <a class="header-anchor" href="#match-方法-在字符串内检索指定的值-或找到一个或多个正则表达式的匹配。返回一个由匹配结果组成的数组" aria-label="Permalink to &quot;match() 方法：在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。返回一个由匹配结果组成的数组&quot;">​</a></h3><p>传递一个参数：match(regexp)</p><ul><li>必须，一个正则表达式</li><li>返回数组的内容依赖于 regexp 是否具有全局标志 g。如果没有全局标志，返回一个类数组对象。如果有全局匹配标志，则返回匹配结果组成的数组。如果没找到匹配结果返回 null 。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> /love/</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.match(pattern); </span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&quot;love&quot;, index: 2, input: &quot;I,love,you,Do,you,love,me&quot;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> /love/</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.match(pattern); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&quot;love&quot;, &quot;love&quot;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> /hate/</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.match(pattern); </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// null</span></span></code></pre></div><h3 id="exec-方法-这是属于正则对象的方法-用法和-match-类似" tabindex="-1">exec() 方法：这是属于正则对象的方法，用法和 match 类似 <a class="header-anchor" href="#exec-方法-这是属于正则对象的方法-用法和-match-类似" aria-label="Permalink to &quot;exec() 方法：这是属于正则对象的方法，用法和 match 类似&quot;">​</a></h3><p>regexp.exec(str)，将字符串作为参数传递</p><blockquote><p>使用全局匹配似乎没有效果......</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> /love/</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> arr </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.exec(str); </span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// [&quot;love&quot;, index: 2, input: &quot;I,love,you,Do,you,love,me&quot;]</span></span></code></pre></div><h3 id="search-方法-查找字符串中指定的子字符串-或查找与正则表达式相匹配的子字符串" tabindex="-1">search() 方法：查找字符串中指定的子字符串，或查找与正则表达式相匹配的子字符串 <a class="header-anchor" href="#search-方法-查找字符串中指定的子字符串-或查找与正则表达式相匹配的子字符串" aria-label="Permalink to &quot;search() 方法：查找字符串中指定的子字符串，或查找与正则表达式相匹配的子字符串&quot;">​</a></h3><p>传递一个参数：search(str || regexp)</p><ul><li>参数必需。返回匹配到的第一个子字符串所在的位置。如没有匹配结果返回 -1。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;I,love,you,Do,you,love,me&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> /love/</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> index </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.search(pattern);  </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 2</span></span></code></pre></div><h2 id="_10-字符串比较" tabindex="-1">10. 字符串比较 <a class="header-anchor" href="#_10-字符串比较" aria-label="Permalink to &quot;10. 字符串比较&quot;">​</a></h2><h3 id="localecompare-方法返回一个数字来指示一个参考字符串的在排序顺序是否在给定字符串之前、之后或与之相同" tabindex="-1">localeCompare()： 方法返回一个数字来指示一个参考字符串的在排序顺序是否在给定字符串之前、之后或与之相同 <a class="header-anchor" href="#localecompare-方法返回一个数字来指示一个参考字符串的在排序顺序是否在给定字符串之前、之后或与之相同" aria-label="Permalink to &quot;localeCompare()： 方法返回一个数字来指示一个参考字符串的在排序顺序是否在给定字符串之前、之后或与之相同&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span>// ...</span></span></code></pre></div><h2 id="_11-去除空格" tabindex="-1">11. 去除空格 <a class="header-anchor" href="#_11-去除空格" aria-label="Permalink to &quot;11. 去除空格&quot;">​</a></h2><h3 id="trim-去除字符串前后的空格-中间的不能去除-返回新的字符串" tabindex="-1">trim()，去除字符串前后的空格（中间的不能去除），返回新的字符串 <a class="header-anchor" href="#trim-去除字符串前后的空格-中间的不能去除-返回新的字符串" aria-label="Permalink to &quot;trim()，去除字符串前后的空格（中间的不能去除），返回新的字符串&quot;">​</a></h3><ul><li>trimStart()/trimLeft()：去除字符串开始侧/左侧的空格</li><li>trimEnd()/trimRight()：去除字符串结束侧/右侧的空格</li></ul><p>空字符串也可以使用此方法，返回值仍为 空字符串</p><blockquote><p>对于用户输入框内容整理很有用</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;    a b c     &#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.trim();</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(str);   </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// &#39;a b c&#39;</span></span></code></pre></div><h2 id="_12-样式包装方法" tabindex="-1">12. 样式包装方法 <a class="header-anchor" href="#_12-样式包装方法" aria-label="Permalink to &quot;12. 样式包装方法&quot;">​</a></h2><blockquote><p><a href="http://www.runoob.com/jsref/jsref-obj-string.html" target="_blank" rel="noreferrer">样式包装方法大全</a></p></blockquote>`,84)]))}const g=i(l,[["render",t]]);export{B as __pageData,g as default};
