import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CgAj5nG9.js";const B=JSON.parse('{"title":"断言和类型守卫","description":"","frontmatter":{},"headers":[],"relativePath":"note/TypeScript/04-ts断言和类型守卫.md","filePath":"note/TypeScript/04-ts断言和类型守卫.md","lastUpdated":1751877942000}'),k={name:"note/TypeScript/04-ts断言和类型守卫.md"};function l(p,s,t,e,F,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="断言和类型守卫" tabindex="-1">断言和类型守卫 <a class="header-anchor" href="#断言和类型守卫" aria-label="Permalink to &quot;断言和类型守卫&quot;">​</a></h1><h2 id="断言" tabindex="-1">断言 <a class="header-anchor" href="#断言" aria-label="Permalink to &quot;断言&quot;">​</a></h2><p>断言分为三种：类型断言、非空断言、确定赋值断言 <br> 当断言失效后，可能使用到：双重断言</p><h3 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h3><p>在特定的环境中，我们会比TS知道这个值具体是什么类型，不需要TS去判断，简单的理解就是，类型断言会告诉编译器，你不用给我进行检查，相信我，他就是这个类型</p><p>共有两种方式：</p><ul><li>尖括号</li><li>as（推荐）</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//尖括号</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> num</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;123&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> res1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (&lt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;num).</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">; </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// React中会 error</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 尖括号语法在React中会报错，原因是与JSX语法会产生冲突，所以只能使用as语法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// as 语法</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;str&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> res</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">).</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span></code></pre></div><h3 id="非空断言" tabindex="-1">非空断言 <a class="header-anchor" href="#非空断言" aria-label="Permalink to &quot;非空断言&quot;">​</a></h3><p>在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于断言操作对象是非 null 和非 undefined 类型。</p><p>示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> func(username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> uname</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> username </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// error</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> uanme1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> //</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><h3 id="确定赋值断言" tabindex="-1">确定赋值断言 <a class="header-anchor" href="#确定赋值断言" aria-label="Permalink to &quot;确定赋值断言&quot;">​</a></h3><p>在TS 2.7版本中引入了确定赋值断言，即允许在实例属性和变量声明后面放置一个 ! 号，以告诉TS该属性会被明确赋值。</p><p>示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(username) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// error</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(age) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// ok</span></span></code></pre></div><h3 id="双重断言" tabindex="-1">双重断言 <a class="header-anchor" href="#双重断言" aria-label="Permalink to &quot;双重断言&quot;">​</a></h3><p>双重断言用于处理当想将S类型的变量断言为T类型，但是S类型和T类型互相兼容的情况。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;zs&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// ok</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> username1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;zs&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// ok</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;zs&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType1 </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//error</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;zs&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType1 </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">//ok</span></span></code></pre></div><h2 id="类型守卫" tabindex="-1">类型守卫 <a class="header-anchor" href="#类型守卫" aria-label="Permalink to &quot;类型守卫&quot;">​</a></h2><p>类型守卫：是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。<br> 类型守卫就是你可以设置多种类型，但我默认你是什么类型的意思<br> 目前，常有的类型守卫共有4种：in关键字、typeof关键字、instanceof和类型谓词（is)<br></p><h3 id="in关键字" tabindex="-1">in关键字 <a class="header-anchor" href="#in关键字" aria-label="Permalink to &quot;in关键字&quot;">​</a></h3><p>用于判断这个属性是那个里面的</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType2 {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  a1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  b1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> func(data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType2) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;a&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;myType1&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;a1&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;myType2&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">func({ a1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// myType2</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">func({ a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;str&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b1</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// myType1</span></span></code></pre></div><h3 id="typeof关键字" tabindex="-1">typeof关键字 <a class="header-anchor" href="#typeof关键字" aria-label="Permalink to &quot;typeof关键字&quot;">​</a></h3><p>用于判断基本类型，如string ｜ number等</p><p>示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> func(data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;string&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;string&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;number&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;number&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">func(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;123&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// string</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">func(</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;">123</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// number</span></span></code></pre></div><h3 id="instanceof关键字" tabindex="-1">instanceof关键字 <a class="header-anchor" href="#instanceof关键字" aria-label="Permalink to &quot;instanceof关键字&quot;">​</a></h3><p>用于判断一个对象是不是一个构造函数，或使用类的实例</p><p>示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> UserName {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;zs&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> UserName {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 12</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> setInfo </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> UserName) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Age) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.name)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> UserName) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.name)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">setInfo(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> UserName()) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// zs zs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">setInfo(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Age()) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 12 zs</span></span></code></pre></div><h3 id="类型谓词" tabindex="-1">类型谓词 <a class="header-anchor" href="#类型谓词" aria-label="Permalink to &quot;类型谓词&quot;">​</a></h3><p>is 关键字一般用于函数返回值类型中，判断参数是否属于某一类型，并根据结果返回对应的布尔类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> isString(s</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> s </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> s </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;string&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 判断参数是否为字符串,是在调用转大写方法</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> ifUpperCase(str</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(isString(str)){</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    str</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.toUpperCase()</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">    // (parameter) str: string</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>s is string不仅返回boolean类型判断参数s是不是string类型, 同时明确的string类型返回到条件为true的代码块中.</p><p>因此当我们判断条件为true, 即str为string类型时, 代码块中str类型也转为更明确的string类型</p><p>类型谓词的主要特点是：</p><ul><li>返回类型谓词，如 s is string；</li><li>包含可以准确确定给定变量类型的逻辑语句，如 typeof s === &#39;string&#39;。</li></ul>`,39)]))}const g=i(k,[["render",l]]);export{B as __pageData,g as default};
