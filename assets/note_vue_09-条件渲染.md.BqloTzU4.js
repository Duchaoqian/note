import{_ as s,c as l,o as a,ag as e}from"./chunks/framework.CgAj5nG9.js";const c=JSON.parse('{"title":"条件渲染","description":"","frontmatter":{},"headers":[],"relativePath":"note/vue/09-条件渲染.md","filePath":"note/vue/09-条件渲染.md","lastUpdated":1751877942000}'),t={name:"note/vue/09-条件渲染.md"};function n(p,i,o,h,r,d){return a(),l("div",null,i[0]||(i[0]=[e(`<h1 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">​</a></h1><ol><li>v-if v-else-if v-else <ol><li>v-if 条件判断满足指定条件 标签会被渲染出来 不满足条件就会被移出掉</li><li>v-else-if 上面条件不满足执行</li><li>v-else 以上条件都不满足执行</li></ol></li><li>template 标签<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      template元素。</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li>v-show 展示和隐藏标签的</li><li>v-show 和 v-if 的区别 <ol><li>v-show 展示和隐藏依赖于 display</li><li>v-if 展示隐藏依赖于将标签删除或添加 (耗费性能)</li></ol></li><li>使用 <ol><li>标签频繁展示或隐藏 使用 v-show</li><li>非频繁展示或隐藏 使用 v-if</li></ol></li></ol>`,2)]))}const _=s(t,[["render",n]]);export{c as __pageData,_ as default};
