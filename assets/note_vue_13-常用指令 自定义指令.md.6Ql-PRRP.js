import{_ as p,c as t,o as h,j as i,a as n,ag as a,t as k}from"./chunks/framework.CgAj5nG9.js";const y=JSON.parse('{"title":"常用指令 自定义指令 钩子函数","description":"","frontmatter":{},"headers":[],"relativePath":"note/vue/13-常用指令 自定义指令.md","filePath":"note/vue/13-常用指令 自定义指令.md","lastUpdated":1751877942000}'),B={name:"note/vue/13-常用指令 自定义指令.md"};function e(l,s,F,d,r,g){return h(),t("div",null,[s[9]||(s[9]=i("h1",{id:"常用指令-自定义指令-钩子函数",tabindex:"-1"},[n("常用指令 自定义指令 钩子函数 "),i("a",{class:"header-anchor",href:"#常用指令-自定义指令-钩子函数","aria-label":'Permalink to "常用指令 自定义指令 钩子函数"'},"​")],-1)),i("ol",null,[s[7]||(s[7]=a("<li>常用指令 <ol><li>v-bind</li><li>v-model</li><li>v-show</li><li>v-if else</li><li>v-for</li><li>v-html</li><li>v-text</li><li>v-on</li><li>v-cloak</li></ol></li>",1)),i("li",null,[s[5]||(s[5]=n("部分指令详解 ")),i("ol",null,[s[3]||(s[3]=a(`<li>v-text 指令用来向标签中添加文本内容<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">h1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-text</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;hello&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">h1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   &lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">h1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;{{hello}}&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">h1</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li>v-html 用来将 html 代码片段插入到 标签中<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-html</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;html&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li><li>使用 pre 标签展示代码<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   &lt;!-- &lt;pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      var option = {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            data() {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">               return {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">                  hello: &#39;欢迎访问vue&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">                  html: \`</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">                  &lt;strong&gt;我是html 文本&lt;/strong&gt;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">                  \`</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">               }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   &lt;/pre&gt; --&gt;</span></span></code></pre></div></li><li>v-pre 不渲染这一块内容 按照原本的展示就可以了<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">span</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-pre&gt;{{js}}&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">span</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li>`,4)),i("li",null,[s[2]||(s[2]=n("v-cloak ")),i("ol",null,[s[0]||(s[0]=i("li",null,"vue 加载晚(比较慢) 渲染页面的时候 vue 还没有接管这个标签容器",-1)),i("li",null,"vue 没有加载完成的时候 "+k(l.hello)+" 就不要展示了 影响美观",1),s[1]||(s[1]=a(`<li>我们借助 v-cloak 属性将标签隐藏掉 当 vue 加载完成的时候 v-cloak 会被移出掉</li><li>v-cloak指令的作用：防止页面加载时出现闪烁问题（解决插值表达式的闪烁问题）；</li><li>插值表达式的闪烁问题原因：代码加载的时候先加载HTML，把插值语法当做HTML内容加载到页面上，当加载完js文件后才把插值语法替换掉，所以我们会看到闪烁问题。</li><li><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-cloak&gt;{{hello}}&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   [v-cloak] {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">       display</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> none</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li>`,4))])]),s[4]||(s[4]=i("li",null,"v-once 只有在开始时渲染 后续数据更新也不会渲染 只渲染一次",-1))]),s[6]||(s[6]=a(`<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-once&gt;{{num}}&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div><ol start="7"><li>v-memo 只有数组中的内容发生改变 标签才会重新渲染<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   &lt;!-- &lt;p v-memo=&quot;[num1,num2]&quot;&gt;{{num}}&lt;/p&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   &lt;!-- v-memo=&quot;[num1 === num2]&quot; 只有变化的数据相等时 才会重新渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   &lt;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> v-memo</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&quot;[num1 === num2]&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;{{num}}&lt;/</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">&gt;</span></span></code></pre></div></li></ol>`,2))]),s[8]||(s[8]=a(`<li>全局注册 自定义指令 <ol><li>app.directive(自定义指令的名称, 函数|对象)</li><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">   app</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.directive(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;focus&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">      console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      //   将光标聚焦到当前标签上</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">      el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.focus()</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   })</span></span></code></pre></div>注解： <ol><li>el: 指令所挂载的元素</li><li>prop: 是一个对象 包含 指令操作的属性，属性值，修饰符 等等</li><li>prop 对象中 <ol><li>arg 属性指的是指令绑定的属性名称，</li><li>value 指令绑的属性值</li><li>instance 指的是 vm 实例对象</li><li>modifiers 包含指令的修饰符</li><li>dir: 包含了指令所使用到的一些方法</li></ol></li></ol></li></ol></li><li>自定义指令 局部注册<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">   // 写在实例中就是局部注册</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   directives</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">      // 自定义指令实现 v-text</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      abc(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">         el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.innerText </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> prop</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.value</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li><li>钩子函数 <ol><li>钩子函数 就是在 合适的时机调用合适的方法 这些方法就被称为钩子函数</li><li>分类 <ol><li>created：在绑定元素的 attribute 或事件监听器被应用之前调用</li><li>beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用。</li><li>mounted：在绑定元素的父组件被挂载后调用。</li><li>beforeUpdate：在更新包含组件的 VNode 之前调用。</li><li>updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用。</li><li>beforeUnmount：在卸载绑定元素的父组件之前调用</li><li>unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次。</li></ol></li><li>实例：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   directives</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      abc</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">         //   如果自定义指令写成函数形式 执行的只有两个时期 mounted updated</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         created(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 指令绑定上 绑定的属性及方法还未生效</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;created&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.title) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 获取不到</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         beforeMount(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.title) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 可以获取到属性 但是标签元素并没有渲染到页面中</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            //   console.log(document.querySelector(&#39;p&#39;))</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // null</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;beforeMount&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         mounted(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 挂载时开启定时器</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.timer </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> setInterval(</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> () {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">               console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;开始计时了&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">               prop</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">instance</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.time</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1000</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.title) </span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 可以获取属性 标签已经渲染到页面中了</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">document</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.querySelector(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;p&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">))</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;mounted&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         beforeUpdate(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 准备开始更新的时候执行这个方法</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;beforeUpdate&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         updated(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 更新完成的时候执行</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;updated&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         beforeUnmount(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 开始卸载时调用</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // console.log(&#39;即将要离开了， 很舍不得&#39;, prop.instance.timer)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 卸载时清除定时器</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">            clearInterval(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">el</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.timer)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         unmounted(el</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> prop) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">            // 卸载完成时调用 做一些收尾的工作</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">            console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;拜拜了您嘞!!&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">         }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">      }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">   }</span></span></code></pre></div></li></ol></li>`,3))])])}const c=p(B,[["render",e]]);export{y as __pageData,c as default};
