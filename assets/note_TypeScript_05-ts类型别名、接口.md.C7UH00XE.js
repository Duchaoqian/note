import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CgAj5nG9.js";const d=JSON.parse('{"title":"类型别名、接口等","description":"","frontmatter":{},"headers":[],"relativePath":"note/TypeScript/05-ts类型别名、接口.md","filePath":"note/TypeScript/05-ts类型别名、接口.md","lastUpdated":1751877942000}'),k={name:"note/TypeScript/05-ts类型别名、接口.md"};function l(p,s,t,e,F,B){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="类型别名、接口等" tabindex="-1">类型别名、接口等 <a class="header-anchor" href="#类型别名、接口等" aria-label="Permalink to &quot;类型别名、接口等&quot;">​</a></h1><h2 id="类型别名-type" tabindex="-1">类型别名（type） <a class="header-anchor" href="#类型别名-type" aria-label="Permalink to &quot;类型别名（type）&quot;">​</a></h2><p>类型别名：也就是type，用来给一个类型起个新名字</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> } </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;aa&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> myType </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 1</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> str </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;cc&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> obj </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> { a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;str&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 132</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> }</span></span></code></pre></div><h2 id="接口-interface" tabindex="-1">接口（interface） <a class="header-anchor" href="#接口-interface" aria-label="Permalink to &quot;接口（interface）&quot;">​</a></h2><p>接口：在面向对象语言中表示行为抽象，也可以用来描述对象的形状。</p><p>使用interface关键字来定义接口</p><h3 id="对象的形状" tabindex="-1">对象的形状 <a class="header-anchor" href="#对象的形状" aria-label="Permalink to &quot;对象的形状&quot;">​</a></h3><p>接口可以用来描述对象，主要可以包括以下数据：可读属性、只读属性、任意属性</p><ul><li>可读属性：当我们定义一个接口时，我们的属性可能不需要全都要，这是就需要 ? 来解决</li><li>只读属性：用 readonly修饰的属性为只读属性，意思是指允许定义，不允许之后进行更改</li><li>任意属性：这个属性极为重要，它是可以用作就算没有定义，也可以使用，比如 [data: string]: any。比如说我们对组件进行封装，而封装的那个组件并没有导出对应的类型，然而又想让他不报错，这时就可以使用任意属性</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Info {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> symbol</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  readonly</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 只读属性</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  hobby</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">[]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  sex</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 可选属性</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  [a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">]</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 任意类型数据</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Info </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Symbol(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;123&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;ZS&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  hobby</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  xx</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;xx&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // error</span></span></code></pre></div><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><p>继承：与类一样，接口也存在继承属性，也是使用extends字段</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Info {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> symbol</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  readonly</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 只读属性</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  hobby</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">[]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  sex</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 可选属性</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  [a</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">]</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 任意类型数据</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> User </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Info {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  address</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> User </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> Symbol(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;123&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;ZS&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  age</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 20</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  hobby</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> []</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  xx</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;xx&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  address</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;郑州&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.age </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#F8F8F8;"> 18</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // error</span></span></code></pre></div><h3 id="函数类型接口" tabindex="-1">函数类型接口 <a class="header-anchor" href="#函数类型接口" aria-label="Permalink to &quot;函数类型接口&quot;">​</a></h3><p>同时，可以定义函数和类，加new修饰的是类，不加new的是函数</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fun {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  (data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 定义函数类型</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> fun </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> A {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;"> &#39;123&#39;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">(name</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.username </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> name</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> cla {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (data</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;"> // 定义类 类型</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">}</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#6B737C;">// 接收类对象类型的数据</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> user1 </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> (func</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> cla) </span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#F97583;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;"> func(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#FFAB70;">&#39;123&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">.log(user1(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#B392F0;--shiki-dark:#B392F0;">))</span></span></code></pre></div><h3 id="type-和-interface-的区别" tabindex="-1">type 和 interface 的区别 <a class="header-anchor" href="#type-和-interface-的区别" aria-label="Permalink to &quot;type 和 interface 的区别&quot;">​</a></h3><p>通过上面的学习，我们发现类型别名和接口非常相似，可以说在大多数情况下，type与interface是等价的</p><p>但在一些特定的场景差距还是比较大的，接下来逐个来看看</p><h4 id="基础数据类型" tabindex="-1">基础数据类型 <a class="header-anchor" href="#基础数据类型" aria-label="Permalink to &quot;基础数据类型&quot;">​</a></h4><ul><li>type和interface都可以定义 对象 和 函数</li><li>type可以定义其他数据类型，如字符串、数字、元祖、联合类型等，而interface不行</li></ul><h4 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h4><p>interface 可以扩展 type，type 也可以扩展为 interface，但两者实现扩展的方式不同。</p><ul><li>interface 是通过 extends 来实现</li><li>type 是通过 &amp; 来实现</li></ul><h4 id="重复定义" tabindex="-1">重复定义 <a class="header-anchor" href="#重复定义" aria-label="Permalink to &quot;重复定义&quot;">​</a></h4><p>interface 可以多次被定义，并且会进行合并，但type不行</p>`,27)]))}const y=i(k,[["render",l]]);export{d as __pageData,y as default};
